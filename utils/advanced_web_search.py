"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞ —Å TF-IDF —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import requests
from bs4 import BeautifulSoup
from urllib.parse import quote, urljoin, urlparse
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import hashlib
import os
import time
import logging
from typing import List, Dict, Any
import re
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞
CACHE_DIR = "cache"
os.makedirs(CACHE_DIR, exist_ok=True)

class AdvancedWebSearch:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        })
        
        # Configure proxy if enabled
        proxy_enabled = os.getenv("PROXY_ENABLED", "false").lower() == "true"
        if proxy_enabled:
            proxy_host = os.getenv("PROXY_HOST")
            proxy_port = os.getenv("PROXY_PORT")
            proxy_username = os.getenv("PROXY_USERNAME")
            proxy_password = os.getenv("PROXY_PASSWORD")
            
            if proxy_host and proxy_port:
                if proxy_username and proxy_password:
                    proxy_url = f"http://{proxy_username}:{proxy_password}@{proxy_host}:{proxy_port}"
                else:
                    proxy_url = f"http://{proxy_host}:{proxy_port}"
                
                self.session.proxies = {
                    "http": proxy_url,
                    "https": proxy_url,
                }
                logger.info(f"üåê AdvancedWebSearch: Proxy enabled {proxy_host}:{proxy_port}")
    
    def duck_search(self, query: str, max_results: int = 5) -> List[str]:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo —Å fallback"""
        try:
            url = f"https://html.duckduckgo.com/html/?q={quote(query)}"
            logger.info(f"–ü–æ–∏—Å–∫ DuckDuckGo: {query}")
            
            response = self.session.get(url, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, "html.parser")
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ (—Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
            links = []
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è DuckDuckGo
            selectors = [
                ".result__url",
                ".result__a",
                ".result__title a",
                ".result a",
                "a[href*='http']"
            ]
            
            for selector in selectors:
                elements = soup.select(selector)
                for elem in elements:
                    href = elem.get("href")
                    if href and href.startswith("http"):
                        # –û—á–∏—â–∞–µ–º DuckDuckGo —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
                        if "/l/?uddg=" in href:
                            try:
                                from urllib.parse import unquote, parse_qs
                                parsed = parse_qs(href.split("?")[1])
                                if "uddg" in parsed:
                                    real_url = unquote(parsed["uddg"][0])
                                    if real_url.startswith("http"):
                                        href = real_url
                                    else:
                                        continue
                                else:
                                    continue
                            except:
                                continue
                        elif href.startswith("//"):
                            href = "https:" + href
                        
                        if href.startswith("http") and href not in links:
                            links.append(href)
                
                if links:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                    break
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if not links:
                logger.warning("DuckDuckGo –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return self._fallback_search(query, max_results)
            
            return links[:max_results]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ DuckDuckGo: {e}")
            return self._fallback_search(query, max_results)
    
    def _fallback_search(self, query: str, max_results: int = 5) -> List[str]:
        """Fallback –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            fallback_urls = [
                f"https://en.wikipedia.org/wiki/{quote(query.replace(' ', '_'))}",
                f"https://coinmarketcap.com/search/?q={quote(query)}",
                f"https://www.google.com/search?q={quote(query)}"
            ]
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ URL
            valid_urls = [url for url in fallback_urls if url.startswith("http")]
            logger.info(f"Fallback –ø–æ–∏—Å–∫: {len(valid_urls)} URL")
            
            return valid_urls[:max_results]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ fallback –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def fetch_text(self, url: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞: {url}")
            response = self.session.get(url, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, "html.parser")
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for element in soup(["script", "style", "noscript", "nav", "footer", "header", "aside"]):
                element.decompose()
            
            # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–∞–º–∏ —Ä–µ–∫–ª–∞–º—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            for element in soup.find_all(class_=re.compile(r"(ad|advertisement|banner|menu|navigation|sidebar|footer|header)")):
                element.decompose()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            main_content = soup.find("main") or soup.find("article") or soup.find("div", class_=re.compile(r"(content|main|article)"))
            
            if main_content:
                text = main_content.get_text(separator="\n", strip=True)
            else:
                text = soup.get_text(separator="\n", strip=True)
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            lines = [line.strip() for line in text.split('\n') if line.strip()]
            text = '\n'.join(lines)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            return text[:5000]  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
            return ""
    
    def cache_path(self, key: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞"""
        return os.path.join(CACHE_DIR, hashlib.md5(key.encode()).hexdigest() + ".txt")
    
    def get_cached_or_fetch(self, url: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å"""
        cache_file = self.cache_path(url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞)
        if os.path.exists(cache_file):
            file_age = time.time() - os.path.getmtime(cache_file)
            if file_age < 86400:  # 24 —á–∞—Å–∞
                try:
                    with open(cache_file, "r", encoding="utf-8") as f:
                        content = f.read()
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞: {url}")
                    return content
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞ {url}: {e}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º
        content = self.fetch_text(url)
        if content:
            try:
                with open(cache_file, "w", encoding="utf-8") as f:
                    f.write(content)
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {url}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à {url}: {e}")
        
        return content
    
    def rank_contexts(self, query: str, docs: List[str]) -> List[str]:
        """–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é TF-IDF"""
        try:
            if not docs or not any(doc.strip() for doc in docs):
                return docs
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            clean_docs = [doc.strip() for doc in docs if doc.strip()]
            if not clean_docs:
                return docs
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Äizer —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏
            stop_words = [
                '–∏', '–≤', '–≤–æ', '–Ω–µ', '—á—Ç–æ', '–æ–Ω', '–Ω–∞', '—è', '—Å', '—Å–æ', '–∫–∞–∫', '–∞', '—Ç–æ', '–≤—Å–µ', '–æ–Ω–∞', '—Ç–∞–∫', '–µ–≥–æ', '–Ω–æ', '–¥–∞', '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ', '–±—ã–ª–æ', '–≤–æ—Ç', '–æ—Ç', '–º–µ–Ω—è', '–µ—â–µ', '–Ω–µ—Ç', '–æ', '–∏–∑', '–µ–º—É', '—Ç–µ–ø–µ—Ä—å', '–∫–æ–≥–¥–∞', '–¥–∞–∂–µ', '–Ω—É', '–≤–¥—Ä—É–≥', '–ª–∏', '–µ—Å–ª–∏', '—É–∂–µ', '–∏–ª–∏', '–Ω–∏', '–±—ã—Ç—å', '–±—ã–ª', '–Ω–µ–≥–æ', '–¥–æ', '–≤–∞—Å', '–Ω–∏–±—É–¥—å', '–æ–ø—è—Ç—å', '—É–∂', '–≤–∞–º', '–≤–µ–¥—å', '—Ç–∞–º', '–ø–æ—Ç–æ–º', '—Å–µ–±—è', '–Ω–∏—á–µ–≥–æ', '–µ–π', '–º–æ–∂–µ—Ç', '–æ–Ω–∏', '—Ç—É—Ç', '–≥–¥–µ', '–µ—Å—Ç—å', '–Ω–∞–¥–æ', '–Ω–µ–π', '–¥–ª—è', '–º—ã', '—Ç–µ–±—è', '–∏—Ö', '—á–µ–º', '–±—ã–ª–∞', '—Å–∞–º', '—á—Ç–æ–±', '–±–µ–∑', '–±—É–¥—Ç–æ', '—á–µ–≥–æ', '—Ä–∞–∑', '—Ç–æ–∂–µ', '—Å–µ–±–µ', '–ø–æ–¥', '–±—É–¥–µ—Ç', '–∂', '—Ç–æ–≥–¥–∞', '–∫—Ç–æ', '—ç—Ç–æ—Ç', '—Ç–æ–≥–æ', '–ø–æ—Ç–æ–º—É', '—ç—Ç–æ–≥–æ', '–∫–∞–∫–æ–π', '—Å–æ–≤—Å–µ–º', '–Ω–∏–º', '–∑–¥–µ—Å—å', '—ç—Ç–æ–º', '–æ–¥–∏–Ω', '–ø–æ—á—Ç–∏', '–º–æ–π', '—Ç–µ–º', '—á—Ç–æ–±—ã', '–Ω–µ–µ', '—Å–µ–π—á–∞—Å', '–±—ã–ª–∏', '–∫—É–¥–∞', '–∑–∞—á–µ–º', '–≤—Å–µ—Ö', '–Ω–∏–∫–æ–≥–¥–∞', '–º–æ–∂–Ω–æ', '–ø—Ä–∏', '–Ω–∞–∫–æ–Ω–µ—Ü', '–¥–≤–∞', '–æ–±', '–¥—Ä—É–≥–æ–π', '—Ö–æ—Ç—å', '–ø–æ—Å–ª–µ', '–Ω–∞–¥', '–±–æ–ª—å—à–µ', '—Ç–æ—Ç', '—á–µ—Ä–µ–∑', '—ç—Ç–∏', '–Ω–∞—Å', '–ø—Ä–æ', '–≤—Å–µ–≥–æ', '–Ω–∏—Ö', '–∫–∞–∫–∞—è', '–º–Ω–æ–≥–æ', '—Ä–∞–∑–≤–µ', '—Ç—Ä–∏', '—ç—Ç—É', '–º–æ—è', '–≤–ø—Ä–æ—á–µ–º', '—Ö–æ—Ä–æ—à–æ', '—Å–≤–æ—é', '—ç—Ç–æ–π', '–ø–µ—Ä–µ–¥', '–∏–Ω–æ–≥–¥–∞', '–ª—É—á—à–µ', '—á—É—Ç—å', '—Ç–æ–º', '–Ω–µ–ª—å–∑—è', '—Ç–∞–∫–æ–π', '–∏–º', '–±–æ–ª–µ–µ', '–≤—Å–µ–≥–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–≤—Å—é', '–º–µ–∂–¥—É'
            ]
            
            vectorizer = TfidfVectorizer(
                stop_words=stop_words,
                max_features=1000,
                ngram_range=(1, 2)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            all_texts = [query] + clean_docs
            
            try:
                vectors = vectorizer.fit_transform(all_texts)
                scores = cosine_similarity(vectors[0:1], vectors[1:]).flatten()
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                scored_docs = sorted(zip(scores, clean_docs), key=lambda x: -x[0])
                ranked_docs = [doc for _, doc in scored_docs]
                
                logger.info(f"–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –õ—É—á—à–∏–π —Å–∫–æ—Ä: {max(scores) if len(scores) > 0 else 0:.3f}")
                return ranked_docs
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ TF-IDF —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                return clean_docs
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {e}")
            return docs
    
    def search_and_analyze(self, query: str, max_results: int = 5) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫: {query}")
        
        # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫
        links = self.duck_search(query, max_results)
        if not links:
            return {
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
                "query": query,
                "results": []
            }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        raw_docs = []
        successful_links = []
        
        for link in links:
            content = self.get_cached_or_fetch(link)
            if content:
                raw_docs.append(content)
                successful_links.append(link)
        
        if not raw_docs:
            return {
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü",
                "query": query,
                "results": []
            }
        
        # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        ranked_docs = self.rank_contexts(query, raw_docs)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results = []
        for i, (doc, link) in enumerate(zip(ranked_docs, successful_links)):
            results.append({
                "rank": i + 1,
                "url": link,
                "content": doc,
                "relevance_score": 1.0 - (i * 0.1)  # –ü—Ä–æ—Å—Ç–æ–π —Å–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–Ω–≥–∞
            })
        
        logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        return {
            "query": query,
            "total_results": len(results),
            "results": results,
            "cache_hits": len([f for f in os.listdir(CACHE_DIR) if f.endswith('.txt')]) if os.path.exists(CACHE_DIR) else 0
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
advanced_search = AdvancedWebSearch()

def get_advanced_web_search(query: str, max_results: int = 5) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
    return advanced_search.search_and_analyze(query, max_results)

def format_advanced_search_results(search_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è AI"""
    if "error" in search_data:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_data['error']}"
    
    if not search_data.get("results"):
        return "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    formatted_text = f"üåê –ü–†–û–î–í–ò–ù–£–¢–´–ô –í–ï–ë-–ü–û–ò–°–ö –ü–û –ó–ê–ü–†–û–°–£ '{search_data['query']}':\n"
    formatted_text += f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {search_data['total_results']}\n"
    formatted_text += f"üíæ –ö—ç—à-—Ñ–∞–π–ª–æ–≤: {search_data.get('cache_hits', 0)}\n\n"
    
    for result in search_data["results"][:3]:  # –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        formatted_text += f"### –†–µ–∑—É–ª—å—Ç–∞—Ç #{result['rank']}\n"
        formatted_text += f"üîó URL: {result['url']}\n"
        formatted_text += f"üìà –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['relevance_score']:.2f}\n"
        formatted_text += f"üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç:\n{result['content'][:1000]}...\n\n"
    
    return formatted_text
