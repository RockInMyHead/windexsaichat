#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WindexAI —Å ngrok
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π URL –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
"""

import subprocess
import time
import json
import requests
import os
import signal
import sys
from threading import Thread
import uvicorn

class NgrokManager:
    def __init__(self):
        self.ngrok_process = None
        self.public_url = None
        
    def start_ngrok(self):
        """–ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è"""
        try:
            print("üåê –ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è...")
            self.ngrok_process = subprocess.Popen(
                ["ngrok", "start", "windexai", "--config=ngrok.yml"],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ ngrok
            time.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
            self.get_public_url()
            
            if self.public_url:
                print(f"‚úÖ Ngrok –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"üîó –ü—É–±–ª–∏—á–Ω—ã–π URL: {self.public_url}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok: {e}")
            return False
    
    def get_public_url(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL –∏–∑ ngrok API"""
        try:
            response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
            if response.status_code == 200:
                data = response.json()
                for tunnel in data.get('tunnels', []):
                    if tunnel.get('proto') == 'https':
                        self.public_url = tunnel.get('public_url')
                        break
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ ngrok API: {e}")
    
    def stop_ngrok(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ngrok"""
        if self.ngrok_process:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ngrok...")
            self.ngrok_process.terminate()
            self.ngrok_process.wait()
    
    def update_deploy_config(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ–ø–ª–æ—è —Å –Ω–æ–≤—ã–º URL"""
        if not self.public_url:
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['NGROK_URL'] = self.public_url
        print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è NGROK_URL: {self.public_url}")

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    if ngrok_manager:
        ngrok_manager.stop_ngrok()
    sys.exit(0)

def start_fastapi():
    """–ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    uvicorn.run("main:app", host="0.0.0.0", port=8003, reload=False)

if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    ngrok_manager = NgrokManager()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
        if not ngrok_manager.start_ngrok():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ngrok. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            sys.exit(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        ngrok_manager.update_deploy_config()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
        start_fastapi()
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        ngrok_manager.stop_ngrok()
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

