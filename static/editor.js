class AIEditor {
    constructor() {
        this.conversationHistory = [];
        this.currentGeneration = null;
        this.currentConversationId = null;
        this.authToken = localStorage.getItem('windexai_token');
        this.currentMode = 'lite'; // Default to Lite mode
        this.useTwoStage = true; // Default to two-stage LLM system
        this.thinkingStep = 0;
        this.thinkingInterval = null;
        this.thinkingPollingInterval = null;
        this.hasGeneratedContent = false;
        console.log('üéØ Initial mode set to:', this.currentMode);
        console.log('üéØ Two-stage LLM system enabled:', this.useTwoStage);
        this.initializeElements();
        this.setupEventListeners();
        this.toggleSendButton(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (this.sendBtn) {
            this.sendBtn.disabled = false;
            console.log('Send button force enabled');
        }

        this.checkAuth();
        this.loadConversations();
        
        // Clear iframe on page load
        this.clearIframe();
        
        // Test iframe functionality
        this.testIframe();
        this.checkUrlParams();
        
        // Restore project content if there's an active conversation
        setTimeout(() => {
            this.restoreProjectContent();
        }, 1000);
    }
    
    clearIframe() {
        if (this.previewIframe) {
            console.log('üßπ Clearing iframe content...');
            this.previewIframe.srcdoc = `
                <!DOCTYPE html>
                <html lang='ru'>
                <head>
                    <meta charset='UTF-8'>
                    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
                    <title>–ü—Ä–µ–≤—å—é —Å–∞–π—Ç–∞</title>
                    <style>
                        body {
                            margin: 0;
                            padding: 20px;
                            font-family: 'Inter', sans-serif;
                            background: #f8f9fa;
                            color: #333;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            height: 100vh;
                            text-align: center;
                        }
                        .placeholder {
                            background: white;
                            padding: 2rem;
                            border-radius: 10px;
                            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                            max-width: 400px;
                        }
                        .placeholder-icon {
                            font-size: 3rem;
                            margin-bottom: 1rem;
                        }
                        .placeholder-title {
                            font-size: 1.5rem;
                            font-weight: 600;
                            margin-bottom: 0.5rem;
                            color: #667eea;
                        }
                        .placeholder-desc {
                            color: #666;
                            line-height: 1.5;
                        }
                    </style>
                </head>
                <body>
                    <div class='placeholder'>
                        <div class='placeholder-icon'>üöÄ</div>
                        <div class='placeholder-title'>–ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é</div>
                        <div class='placeholder-desc'>
                            –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞
                        </div>
                    </div>
                </body>
                </html>
            `;
        }
    }
    
    restoreProjectContent() {
        if (this.currentConversationId && this.previewIframe) {
            console.log('üîÑ Restoring project content for conversation:', this.currentConversationId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML
            if (this.hasGeneratedContent && this.lastGeneratedHtml) {
                console.log('‚úÖ Already has generated content, skipping restore');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –±–µ—Å–µ–¥—ã
            if (this.conversationHistory.length > 0) {
                const lastMessage = this.conversationHistory[this.conversationHistory.length - 1];
                if (lastMessage.role === 'assistant' && lastMessage.content) {
                    console.log('üîÑ Restoring from conversation history...');
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    this.updatePreview(lastMessage.content);
                }
            }
        }
    }
    
    forceRestoreContent() {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if (this.lastGeneratedHtml && this.previewIframe) {
            console.log('üîÑ Force restoring generated content...');
            this.previewIframe.srcdoc = this.lastGeneratedHtml;
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if (this.restoreContentBtn) {
                this.restoreContentBtn.style.display = 'none';
            }
        }
    }
    
    showRestoreButton() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.restoreContentBtn && this.lastGeneratedHtml) {
            this.restoreContentBtn.style.display = 'inline-block';
        }
    }
    
    hideRestoreButton() {
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.restoreContentBtn) {
            this.restoreContentBtn.style.display = 'none';
        }
    }
    
    testIframe() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if (this.previewIframe && !this.currentConversationId && !this.previewIframe.srcdoc) {
            console.log('üß™ Testing iframe functionality...');
            var testHtml = `
                <!DOCTYPE html>
                <html>
                <head><title>Test</title></head>
                <body>
                    <h1>Iframe Test</h1>
                    <p>If you can see this, the iframe is working!</p>
                </body>
                </html>
            `;
            this.previewIframe.srcdoc = testHtml;
            console.log('üß™ Test HTML set in iframe');
            
            // –£–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            setTimeout(() => {
                if (this.previewIframe && this.previewIframe.srcdoc === testHtml && !this.currentConversationId && !this.lastGeneratedHtml) {
                    this.previewIframe.srcdoc = `
                        <!DOCTYPE html>
                        <html lang='ru'>
                        <head>
                            <meta charset='UTF-8'>
                            <meta name='viewport' content='width=device-width, initial-scale=1.0'>
                            <title>WindexsAI - –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è</title>
                            <style>
                                body {
                                    margin: 0;
                                    font-family: 'Inter', sans-serif;
                                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                                    color: white;
                                    display: flex;
                                    align-items: center;
                                    justify-content: center;
                                    height: 100vh;
                                    text-align: center;
                                }
                                .container {
                                    max-width: 600px;
                                    padding: 2rem;
                                }
                                .logo {
                                    font-size: 3rem;
                                    font-weight: 700;
                                    margin-bottom: 1rem;
                                    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                                    -webkit-background-clip: text;
                                    -webkit-text-fill-color: transparent;
                                    background-clip: text;
                                }
                                .subtitle {
                                    font-size: 1.2rem;
                                    margin-bottom: 2rem;
                                    opacity: 0.9;
                                }
                                .description {
                                    font-size: 1rem;
                                    line-height: 1.6;
                                    opacity: 0.8;
                                    margin-bottom: 2rem;
                                }
                                .features {
                                    display: grid;
                                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                                    gap: 1rem;
                                    margin-top: 2rem;
                                }
                                .feature {
                                    background: rgba(255, 255, 255, 0.1);
                                    padding: 1rem;
                                    border-radius: 10px;
                                    backdrop-filter: blur(10px);
                                }
                                .feature-icon {
                                    font-size: 2rem;
                                    margin-bottom: 0.5rem;
                                }
                                .feature-title {
                                    font-weight: 600;
                                    margin-bottom: 0.5rem;
                                }
                                .feature-desc {
                                    font-size: 0.9rem;
                                    opacity: 0.8;
                                }
                            </style>
                        </head>
                        <body>
                            <div class='container'>
                                <div class='logo'>WindexsAI</div>
                                <div class='subtitle'>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è</div>
                                <div class='description'>
                                    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–µ AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–∞–π—Ç—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ, 
                                    –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Ä–µ—à–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–¥–æ–≤–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
                                </div>
                                <div class='features'>
                                    <div class='feature'>
                                        <div class='feature-icon'>üåê</div>
                                        <div class='feature-title'>–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤</div>
                                        <div class='feature-desc'>–ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç—ã —Å –ø–æ–º–æ—â—å—é AI</div>
                                    </div>
                                    <div class='feature'>
                                        <div class='feature-icon'>üí¨</div>
                                        <div class='feature-title'>–£–º–Ω—ã–π —á–∞—Ç</div>
                                        <div class='feature-desc'>–û–±—â–∞–π—Ç–µ—Å—å —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π</div>
                                    </div>
                                    <div class='feature'>
                                        <div class='feature-icon'>üìä</div>
                                        <div class='feature-title'>–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</div>
                                        <div class='feature-desc'>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</div>
                                    </div>
                                </div>
                            </div>
                        </body>
                        </html>
                    `;
                    console.log('üß™ Test content removed, showing WindexsAI default message');
                }
            }, 3000);
        } else {
            console.log('‚ùå Preview iframe not found!');
        }
    }
    
    // Manual test function for debugging
    testHtmlExtraction() {
        var testContent = `Create a blog HTML_START \`\`\`html
<!DOCTYPE html>
<html>
<head><title>Test Blog</title></head>
<body><h1>Test Blog</h1></body>
</html>
\`\`\` HTML_END`;
        
        console.log('üß™ Testing HTML extraction...');
        console.log('üß™ Test content:', testContent);
        
        var htmlMatch = testContent.match(/HTML_START\s*`{0,3}html\s*([\s\S]*?)\s*`{0,3}\s*HTML_END/);
        console.log('üß™ HTML match result:', htmlMatch);
        
        if (htmlMatch && htmlMatch[1]) {
            var html = htmlMatch[1].trim();
            console.log('üß™ Extracted HTML:', html);
            if (this.previewIframe) {
                this.previewIframe.srcdoc = html;
                console.log('üß™ HTML set in iframe');
            }
        } else {
            console.log('üß™ HTML extraction failed');
        }
    }
    
    tryExtractHtmlFromAnyFormat(content) {
        console.log('üîç Trying to extract HTML from any format...');
        
        // –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ HTML
        var patterns = [
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            /HTML_START\s*`{0,3}html\s*([\s\S]*?)\s*`{0,3}\s*HTML_END/,
            /HTML_START\s*```html\s*([\s\S]*?)\s*```\s*HTML_END/,
            /HTML_START\s*```\s*([\s\S]*?)\s*```\s*HTML_END/,
            /HTML_START\s*([\s\S]*?)\s*HTML_END/,
            
            // –û–±—ã—á–Ω—ã–µ code blocks
            /```html\s*([\s\S]*?)\s*```/,
            /```\s*([\s\S]*?)\s*```/,
            
            // –ü–æ–∏—Å–∫ HTML —Ç–µ–≥–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
            /<!DOCTYPE html>[\s\S]*?<\/html>/i,
            /<html[\s\S]*?<\/html>/i,
            
            // –ü–æ–∏—Å–∫ HTML –±–µ–∑ DOCTYPE
            /<html[\s\S]*?<\/html>/i
        ];
        
        for (var i = 0; i < patterns.length; i++) {
            var match = content.match(patterns[i]);
            if (match && match[1]) {
                var html = match[1].trim();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ HTML
                if (html.includes('<html') || html.includes('<!DOCTYPE')) {
                    console.log('‚úÖ HTML –Ω–∞–π–¥–µ–Ω —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º', i, '–¥–ª–∏–Ω–∞:', html.length);
                    console.log('‚úÖ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', html.substring(0, 200));
                    return html;
                }
            }
        }
        
        console.log('‚ùå HTML –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º');
        return null;
    }

    initializeElements() {
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
        this.chatInput = document.getElementById('chat-input');
        this.sendBtn = document.getElementById('send-chat-btn');
        this.chatMessages = document.getElementById('chat-messages');
        
        // Mode selector elements
        this.liteModeBtn = document.getElementById('lite-mode-btn');
        this.proModeBtn = document.getElementById('pro-mode-btn');
        this.twoStageToggle = document.getElementById('two-stage-toggle');

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('Editor elements initialized:', {
            chatInput: !!this.chatInput,
            sendBtn: !!this.sendBtn,
            chatMessages: !!this.chatMessages
        });
        this.previewIframe = document.getElementById('preview');
        if (this.previewIframe) {
            console.log('‚úÖ Preview iframe found');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –∫–ª–∏–∫–∞—Ö
            this.previewIframe.addEventListener('load', () => {
                console.log('üîÑ Iframe loaded, checking content...');
                // –ï—Å–ª–∏ iframe –∑–∞–≥—Ä—É–∑–∏–ª—Å—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                if (this.lastGeneratedHtml && this.previewIframe.srcdoc && this.previewIframe.srcdoc.includes('WindexsAI')) {
                    console.log('üîÑ Showing restore button...');
                    this.showRestoreButton();
                } else if (this.lastGeneratedHtml && this.previewIframe.srcdoc && !this.previewIframe.srcdoc.includes('WindexsAI')) {
                    // –ö–æ–Ω—Ç–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    this.hideRestoreButton();
                }
            });
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ iframe, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            this.previewIframe.addEventListener('beforeunload', (e) => {
                console.log('üîÑ Iframe beforeunload event');
                // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                if (this.lastGeneratedHtml) {
                    e.preventDefault();
                    e.returnValue = '';
                    return '';
                }
            });
        } else {
            console.log('‚ùå Preview iframe not found');
        }
        this.typingIndicator = document.getElementById('typing-indicator');
        this.errorContainer = document.getElementById('error-container');
        this.statusText = document.getElementById('status-text');
        this.copyBtn = document.getElementById('copy-html-btn');
        this.downloadBtn = document.getElementById('download-html-btn');
        this.deployBtn = document.getElementById('deploy-btn');
        this.editModeBtn = document.getElementById('edit-mode-btn');
        this.restoreContentBtn = document.getElementById('restore-content-btn');
        this.userNameSpan = document.getElementById('user-name');
        this.userAvatar = document.getElementById('user-avatar');
        this.userName = document.getElementById('user-name');
        this.profileModal = document.getElementById('profile-modal');
        this.closeProfileBtn = document.querySelector('.close-profile');

        // History elements
        this.conversationsList = document.getElementById('conversations-list');
        this.newProjectBtn = document.getElementById('new-project-btn');

        // Edit mode state
        this.editMode = false;
        this.selectedElement = null;
        this.editableElements = [];

        // Resizable panels state
        this.panelDivider = document.getElementById('panel-divider');
        this.chatPanel = document.querySelector('.chat-panel');
        this.previewPanel = document.querySelector('.preview-panel');
        this.isDragging = false;
        this.startX = 0;
        this.startChatWidth = 0;
        this.containerWidth = 0;

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('AIEditor initialized:', {
            chatInput: !!this.chatInput,
            sendBtn: !!this.sendBtn,
            chatMessages: !!this.chatMessages
        });

        // Bind methods for event listeners
        this.boundOnDrag = this.onDrag.bind(this);
        this.boundStopDrag = this.stopDrag.bind(this);

        // Modal elements
        this.deployModal = document.getElementById('deploy-modal');
        this.deployTitle = document.getElementById('deploy-title');
        this.deployDescription = document.getElementById('deploy-description');
        this.deployStatus = document.getElementById('deploy-status');
        this.deployActions = document.getElementById('deploy-actions');
        this.viewSiteBtn = document.getElementById('view-site-btn');
        this.copyUrlBtn = document.getElementById('copy-url-btn');
        this.confirmDeployBtn = document.getElementById('confirm-deploy');
        this.cancelDeployBtn = document.getElementById('cancel-deploy');
        this.closeModalBtn = document.querySelector('.close');
        this.projectsBtn = document.getElementById('projects-btn');
        this.dashboardBtn = document.getElementById('dashboard-btn');

        // Store deployment result
        this.lastDeploymentResult = null;

    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        console.log('Setting up event listeners, sendBtn:', this.sendBtn);
        if (this.sendBtn) {
            console.log('Setting up send button event listener');
            this.sendBtn.addEventListener('click', () => {
                console.log('Send button clicked');
                this.sendMessage();
            });
        } else {
            console.error('Send button not found! Element ID: send-chat-btn');
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        if (this.chatInput) {
            this.chatInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });

            this.chatInput.addEventListener('input', () => {
                this.autoResizeInput();
                this.toggleSendButton();
            });
        }

        // Mode selector event listeners
        if (this.liteModeBtn) {
            this.liteModeBtn.addEventListener('click', () => {
                this.setMode('lite');
            });
        }
        
        if (this.proModeBtn) {
            this.proModeBtn.addEventListener('click', () => {
                this.setMode('pro');
            });
        }
        
        // Two-stage toggle event listener
        if (this.twoStageToggle) {
            this.twoStageToggle.addEventListener('change', (e) => {
                this.useTwoStage = e.target.checked;
                console.log('üéØ Two-stage LLM system:', this.useTwoStage ? 'enabled' : 'disabled');
            });
        }

        // –ö–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if (this.copyBtn) {
            this.copyBtn.addEventListener('click', () => this.copyHtml());
        }

        if (this.downloadBtn) {
            this.downloadBtn.addEventListener('click', () => this.downloadHtml());
        }

        if (this.deployBtn) {
            this.deployBtn.addEventListener('click', () => this.showDeployModal());
        }

        if (this.editModeBtn) {
            this.editModeBtn.addEventListener('click', () => this.toggleEditMode());
        }

        // Resizable panels event listeners
        if (this.panelDivider) {
            this.panelDivider.addEventListener('mousedown', (e) => this.startDrag(e));
        }

        // Modal event listeners
        if (this.confirmDeployBtn) {
            this.confirmDeployBtn.addEventListener('click', () => this.deployWebsite());
        }
        if (this.cancelDeployBtn) {
            this.cancelDeployBtn.addEventListener('click', () => this.hideDeployModal());
        }
        if (this.closeModalBtn) {
            this.closeModalBtn.addEventListener('click', () => this.hideDeployModal());
        }
        if (this.viewSiteBtn) {
            this.viewSiteBtn.addEventListener('click', () => this.openDeployedSite());
        }
        if (this.copyUrlBtn) {
            this.copyUrlBtn.addEventListener('click', () => this.copyDeploymentUrl());
        }
        if (this.deployModal) {
            this.deployModal.addEventListener('click', (e) => {
                if (e.target === this.deployModal) {
                    this.hideDeployModal();
                }
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞

        // –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤
        if (this.newProjectBtn) {
            this.newProjectBtn.addEventListener('click', () => this.createNewProject());
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"
        if (this.projectsBtn) {
            this.projectsBtn.addEventListener('click', () => {
                window.location.href = '/static/projects.html';
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
        if (this.dashboardBtn) {
            this.dashboardBtn.addEventListener('click', () => {
                window.location.href = '/static/dashboard.html';
            });
        }

        // Load saved panel sizes
        this.loadPanelSizes();

        // User info click handlers - navigate to profile page
        if (this.userAvatar) {
            this.userAvatar.addEventListener('click', () => {
                this.openUserProfile();
            });
        }

        if (this.userName) {
            this.userName.addEventListener('click', () => {
                this.openUserProfile();
            });
        }
        
        // Also add click handler to the entire user-info container
        const userInfo = document.querySelector('.user-info');
        if (userInfo) {
            userInfo.addEventListener('click', () => {
                this.openUserProfile();
            });
        }

        // Close profile modal
        if (this.closeProfileBtn) {
            this.closeProfileBtn.addEventListener('click', () => {
                this.hideProfileModal();
            });
        }

        // Restore content button
        if (this.restoreContentBtn) {
            this.restoreContentBtn.addEventListener('click', () => {
                this.forceRestoreContent();
            });
        }

    }

    async checkAuth() {
        try {
            var token = localStorage.getItem('windexai_token');
            console.log('Auth token:', token ? 'present' : 'missing');
            if (!token) {
                console.log('No auth token, redirecting to home');
                window.location.href = '/';
                return;
            }

            var response = await fetch('/api/auth/me', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                localStorage.removeItem('windexai_token');
                window.location.href = '/';
                return;
            }

            var user = await response.json();
            if (this.userNameSpan) {
                this.userNameSpan.textContent = user.username;
            }
        } catch (error) {
            console.error('Auth check failed:', error);
            window.location.href = '/';
        }
    }

    setMode(mode) {
        this.currentMode = mode;
        
        // Update button states
        if (this.liteModeBtn && this.proModeBtn) {
            this.liteModeBtn.classList.toggle('active', mode === 'lite');
            this.proModeBtn.classList.toggle('active', mode === 'pro');
        }
        
        // Update placeholder text based on mode
        if (this.chatInput) {
            if (mode === 'lite') {
                this.chatInput.placeholder = '–û–ø–∏—à–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–æ–¥–∏–Ω HTML —Ñ–∞–π–ª)...';
            } else {
                this.chatInput.placeholder = '–û–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å–∞–π—Ç–∞...';
            }
        }
        
        console.log('üéØ Mode changed to:', mode);
        console.log('üéØ Current mode value:', this.currentMode);
    }

    processLiteModeContent(content) {
        console.log('üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ Lite —Ä–µ–∂–∏–º–∞ - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ HTML...');
        console.log('üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:', content.substring(0, 200) + '...');
        console.log('üîç Preview iframe exists:', !!this.previewIframe);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º HTML –∏–∑ –æ—Ç–≤–µ—Ç–∞ - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        var htmlMatch = content.match(/HTML_START\s*`{0,3}html\s*([\s\S]*?)\s*`{0,3}\s*HTML_END/);
        
        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç regex:', htmlMatch);
        
        if (htmlMatch && htmlMatch[1]) {
            var htmlContent = htmlMatch[1].trim();
            console.log('‚úÖ HTML –∏–∑–≤–ª–µ—á–µ–Ω, –¥–ª–∏–Ω–∞:', htmlContent.length);
            console.log('‚úÖ –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ HTML:', htmlContent.substring(0, 100));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å HTML –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º updatePreview...');
            this.previewIframe.srcdoc = htmlContent;
            console.log('‚úÖ HTML content set directly in iframe');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –¥–µ–ø–ª–æ—è
            this.lastGeneratedHtml = htmlContent;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
            this.hasGeneratedContent = true;
            
            this.updateStatus('HTML —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω');
        } else {
            console.log('‚ùå HTML –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
            console.log('‚ùå –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω...');
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            var altMatch = content.match(/HTML_START\s*`{0,3}html\s*([\s\S]*?)\s*`{0,3}\s*HTML_END/);
            if (altMatch && altMatch[1]) {
                console.log('‚úÖ HTML –Ω–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º');
                var htmlContent = altMatch[1].trim();
                this.previewIframe.srcdoc = htmlContent;
                this.lastGeneratedHtml = htmlContent;
                this.hasGeneratedContent = true;
                this.updateStatus('HTML —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω');
            } else {
                console.log('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
                this.updatePreview(content);
            }
        }
    }

    async sendMessage() {
        console.log('sendMessage called');
        var message = this.chatInput?.value?.trim();
        console.log('Message:', message);
        if (!message) {
            console.log('No message, returning');
            return;
        }


        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (this.editMode && this.selectedElement) {
            await this.editSelectedElement(message);
            this.chatInput.value = '';
            this.autoResizeInput();
            this.toggleSendButton();
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.addChatMessage('user', message);
        this.conversationHistory.push({role: 'user', content: message});

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.chatInput.value = '';
        this.autoResizeInput();
        this.toggleSendButton();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.startGeneration();

        try {
            var token = localStorage.getItem('windexai_token');
            if (!token) {
                throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–∞–π–º–∞—É—Ç–∞
            var controller = new AbortController();
            var timeoutId = setTimeout(() => controller.abort(), 300000); // 5 –º–∏–Ω—É—Ç
            
            // Replace fetch handling with streaming reader
            console.log('üöÄ Sending streaming request with mode:', this.currentMode);
            var response = await fetch('/api/ai-editor', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    messages: this.conversationHistory,
                    model: 'gpt-4o-mini',
                    mode: this.currentMode,
                    conversation_id: this.currentConversationId,
                    use_two_stage: this.useTwoStage
                }),
                signal: controller.signal,
                keepalive: true
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            // Read streaming response
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let result = '';
            console.log('üü¢ –ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
            while (true) {
                const { done, value } = await reader.read();
                if (done) break;
                const chunk = decoder.decode(value, { stream: true });
                console.log('üîπ Chunk from server:', chunk);
                result += chunk;
            }
            console.log('‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç:', result);
            // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ JSON, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—è content –∏ conversation_id
            let data;
            try {
                data = JSON.parse(result);
                console.log('üîç Parsed JSON data:', data);
            } catch (e) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ content');
                data = { content: result, conversation_id: null };
            }
            var content = data.content || '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è';

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º conversation_id
            if (data.conversation_id) {
                this.currentConversationId = data.conversation_id;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI
            this.conversationHistory.push({role: 'assistant', content: content});

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞
            var description = this.extractDescription(content);
            this.addChatMessage('assistant', description, data.conversation_id);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
            if (description.includes('üöÄ **–ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω!**')) {
                this.showProjectLaunchInfo(description);
            }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç:', content);
        console.log('üîç Conversation ID:', data.conversation_id);
        console.log('üîç –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:', this.currentMode);
        console.log('üîç –°–æ–¥–µ—Ä–∂–∏—Ç HTML_START:', content.includes('HTML_START'));
        console.log('üîç –°–æ–¥–µ—Ä–∂–∏—Ç PACKAGE_JSON_START:', content.includes('PACKAGE_JSON_START'));
        
        if (this.currentMode === 'lite' && content.includes('HTML_START')) {
            console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω HTML —Ñ–∞–π–ª (Lite —Ä–µ–∂–∏–º), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
            console.log('üîç Full content for debugging:', content);
            this.processLiteModeContent(content);
        } else if (this.currentMode === 'pro' && data.conversation_id && (content.includes('PACKAGE_JSON_START') || content.includes('LAYOUT_TSX_START') || content.includes('PAGE_TSX_START'))) {
            console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω Next.js –ø—Ä–æ–µ–∫—Ç (Pro —Ä–µ–∂–∏–º), –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–≤—å—é...');
            this.generateWebsitePreview(data.conversation_id, this.previewIframe);
        } else {
            console.log('üìÑ –û–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–µ–≤—å—é');
            console.log('üîç Content does not contain HTML_START, full content:', content);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ HTML –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Lite —Ä–µ–∂–∏–º–∞
            if (this.currentMode === 'lite') {
                console.log('üîç Lite —Ä–µ–∂–∏–º: –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ HTML –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ...');
                var htmlFound = this.tryExtractHtmlFromAnyFormat(content);
                if (htmlFound) {
                    console.log('‚úÖ HTML –Ω–∞–π–¥–µ–Ω –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
                    this.previewIframe.srcdoc = htmlFound;
                    this.lastGeneratedHtml = htmlFound;
                    this.updateStatus('HTML —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω');
                    return;
                }
            }
            
            this.updatePreview(content);
        }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
            this.loadConversations();

            this.updateStatus('–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');

        } catch (error) {
            console.error('Generation error:', error);
            if (error.name === 'AbortError') {
                this.showError('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Å–∞–π—Ç –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π.');
            } else if (error.message.includes('Load failed') || error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
                this.showError('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            } else {
                this.showError(`–û—à–∏–±–∫–∞: ${error.message}`);
            }
        } finally {
            this.stopGeneration();
        }
    }

    addChatMessage(role, content, projectId = null) {
        if (!this.chatMessages) return;

        var safeContent = String(content || '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');

        var messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${role}`;

        var avatar = document.createElement('div');
        avatar.className = 'chat-avatar';
        avatar.textContent = role === 'user' ? 'üë§' : '';

        var bubble = document.createElement('div');
        bubble.className = `chat-bubble ${role === 'user' ? 'user-bubble' : 'ai-bubble'}`;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –º—ã—Å–ª—è–º–∏ LLM
        this.processLLMContent(bubble, safeContent, role);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.addPreviewIfNeeded(bubble, role, projectId, safeContent);

        messageDiv.appendChild(avatar);
        messageDiv.appendChild(bubble);
        this.chatMessages.appendChild(messageDiv);
        this.scrollToBottom();
    }

    processLLMContent(container, content, role) {
        if (role === 'user') {
            // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            var text = document.createElement('div');
            text.className = 'chat-text';
            text.textContent = content;
            container.appendChild(text);
            return;
        }

        // –î–ª—è AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º—ã—Å–ª–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        var lines = content.split('\n');
        var currentSection = null;
        var currentContent = [];

        for (var i = 0; i < lines.length; i++) {
            var line = lines[i].trim();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ–∫—Ü–∏–∏
            if (line.includes('üèóÔ∏è') && line.includes('Planning') || line.includes('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å')) {
                this.finishCurrentSection(container, currentSection, currentContent);
                currentSection = 'planning';
                currentContent = [line];
            } else if (line.includes('üë®‚Äçüíª') && line.includes('Processing') || line.includes('–ì–µ–Ω–µ—Ä–∏—Ä—É—é')) {
                this.finishCurrentSection(container, currentSection, currentContent);
                currentSection = 'generating';
                currentContent = [line];
            } else if (line.includes('üìã') && line.includes('–ü–õ–ê–ù') || line.includes('–ü–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')) {
                this.finishCurrentSection(container, currentSection, currentContent);
                currentSection = 'plan';
                currentContent = [line];
            } else if (line.includes('‚úÖ') && line.includes('–í–´–ü–û–õ–ù–ï–ù–ù–´–ï') || line.includes('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã')) {
                this.finishCurrentSection(container, currentSection, currentContent);
                currentSection = 'completed';
                currentContent = [line];
            } else if (line.includes('HTML_START') || line.includes('```html')) {
                this.finishCurrentSection(container, currentSection, currentContent);
                currentSection = 'code';
                currentContent = [line];
            } else if (line.startsWith('üí≠') || line.startsWith('ü§î') || line.startsWith('‚ö°')) {
                this.finishCurrentSection(container, currentSection, currentContent);
                currentSection = 'thinking';
                currentContent = [line];
            } else {
                currentContent.push(line);
            }
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
        this.finishCurrentSection(container, currentSection, currentContent);
    }

    finishCurrentSection(container, sectionType, content) {
        if (!content || content.length === 0) return;

        var text = content.join('\n').trim();
        if (!text) return;

        var element = document.createElement('div');
        
        switch (sectionType) {
            case 'thinking':
                element.className = 'llm-thinking';
                element.textContent = text;
                break;
            case 'planning':
                element.className = 'llm-planning';
                element.textContent = text;
                break;
            case 'generating':
                element.className = 'llm-generating';
                element.textContent = text;
                break;
            case 'plan':
            case 'completed':
                element.className = 'chat-text';
                element.innerHTML = text.replace(/\n/g, '<br>');
                break;
            case 'code':
                element.className = 'chat-text';
                element.innerHTML = text.replace(/\n/g, '<br>');
                break;
            default:
                element.className = 'chat-text';
                element.textContent = text;
        }

        container.appendChild(element);
    }

    addPreviewIfNeeded(container, role, projectId, content) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å–∞–π—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç AI —Å –ø—Ä–æ–µ–∫—Ç–æ–º
        if (role === 'assistant' && projectId && content.includes('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')) {
            var previewContainer = document.createElement('div');
            previewContainer.className = 'website-preview-container';
            previewContainer.style.cssText = `
                margin-top: 15px;
                border: 1px solid #e5e7eb;
                border-radius: 8px;
                overflow: hidden;
                background: white;
            `;

            var previewHeader = document.createElement('div');
            previewHeader.style.cssText = `
                background: #f9fafb;
                padding: 12px 16px;
                border-bottom: 1px solid #e5e7eb;
                font-weight: 600;
                color: #374151;
                display: flex;
                align-items: center;
                gap: 8px;
            `;
            previewHeader.innerHTML = 'üåê <span>–ü—Ä–µ–≤—å—é —Å–∞–π—Ç–∞</span>';

            var previewFrame = document.createElement('iframe');
            previewFrame.style.cssText = `
                width: 100%;
                height: 400px;
                border: none;
                background: white;
            `;

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
            this.generateWebsitePreview(projectId, previewFrame);

            previewContainer.appendChild(previewHeader);
            previewContainer.appendChild(previewFrame);
            container.appendChild(previewContainer);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å project_id
        if (role === 'assistant' && projectId && content.includes('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')) {
            var downloadBtn = document.createElement('button');
            downloadBtn.className = 'download-project-btn';
            downloadBtn.innerHTML = 'üì¶ –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç';
            downloadBtn.style.cssText = `
                margin-top: 10px;
                padding: 8px 16px;
                background: #4CAF50;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
                transition: background 0.3s;
            `;
            downloadBtn.addEventListener('click', () => {
                window.open(`/api/ai-editor/download/${projectId}`, '_blank');
            });
            downloadBtn.addEventListener('mouseenter', () => {
                downloadBtn.style.background = '#45a049';
            });
            downloadBtn.addEventListener('mouseleave', () => {
                downloadBtn.style.background = '#4CAF50';
            });
            container.appendChild(downloadBtn);
        }
    }

    generateWebsitePreview(projectId, iframe) {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ Next.js –ø—Ä–µ–≤—å—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:', projectId);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º live-–ø—Ä–µ–≤—å—é Next.js –ø—Ä–æ–µ–∫—Ç–∞
        var authToken = localStorage.getItem('windexai_token');
        console.log('üîë –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authToken ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if (!authToken) {
            console.error('‚ùå –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            iframe.srcdoc = `<div style="padding:20px;text-align:center;color:#666;">
                <h3>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h3>
                <p>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–≤—å—é</p>
                <button onclick="window.location.href='/'">–í–æ–π—Ç–∏</button>
            </div>`;
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º sandbox –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox');
        iframe.setAttribute('loading', 'lazy');
        
        fetch(`/api/ai-editor/project/${projectId}/preview`, {
            headers: { 'Authorization': 'Bearer ' + authToken }
        })
        .then(res => {
            console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', res.status);
            if (res.status === 401) {
                // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
                localStorage.removeItem('windexai_token');
                window.location.href = '/';
                return;
            }
            if (!res.ok) {
                throw new Error(`Preview API error: ${res.status}`);
            }
            return res.json();
        })
        .then(data => {
            if (!data) return; // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç preview API:', data);
            if (data.url) {
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω URL –¥–ª—è –ø—Ä–µ–≤—å—é:', data.url);
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º live-—Å–∞–π—Ç –≤ iframe
                iframe.src = data.url;
                iframe.style.border = 'none';
                // –£–±–∏—Ä–∞–µ–º srcdoc, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π URL
                iframe.removeAttribute('srcdoc');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                iframe.onload = function() {
                    console.log('üîÑ Iframe –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
                    try {
                        // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                        var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                        if (iframeDoc) {
                            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
                            iframeDoc.addEventListener('DOMContentLoaded', function() {
                                console.log('üîÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω –≤ iframe');
                            }, { once: true });
                        }
                    } catch (e) {
                        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É iframe (CORS)');
                    }
                };
            } else {
                throw new Error('Preview URL not returned');
            }
        })
        .catch(err => {
            console.error('Preview error:', err);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ iframe
            iframe.srcdoc = `<div style="padding:20px;text-align:center;color:#666;">
                <h3>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é</h3>
                <p>${err.message}</p>
                <button onclick="location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>`;
            iframe.style.border = 'none';
        });
    }

    extractDescription(fullText) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        if (fullText.includes('üìã –ü–õ–ê–ù –†–ê–ó–†–ê–ë–û–¢–ö–ò:') || fullText.includes('‚úÖ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –≠–¢–ê–ü–´:')) {
            return this.extractTwoStageDescription(fullText);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ Lite —Ä–µ–∂–∏–º —Å HTML
        if (this.currentMode === 'lite' && fullText.includes('HTML_START')) {
            return this.generateLiteDescription(fullText);
        }

        // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è Pro —Ä–µ–∂–∏–º–∞
        var lines = fullText.split('\n');
        var description = '';

        for (var i = 0; i < lines.length; i++) {
            var line = lines[i];
            if (line.includes('PACKAGE_JSON_START') || line.includes('LAYOUT_TSX_START') || line.includes('PAGE_TSX_START')) {
                break;
            }
            if (line.trim()) {
                description += line.trim() + ' ';
            }
        }

        return description.trim() || '‚úÖ –ü—Ä–æ–µ–∫—Ç Next.js —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π "npm run dev".';
    }

    extractTwoStageDescription(fullText) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        var lines = fullText.split('\n');
        var description = '';
        var inArchitecturalPlan = false;
        var inCompletedTasks = false;
        var inFinalStructure = false;
        var planSteps = [];
        
        for (var i = 0; i < lines.length; i++) {
            var line = lines[i].trim();
            
            if (line.includes('üìã –ü–õ–ê–ù –†–ê–ó–†–ê–ë–û–¢–ö–ò:')) {
                inArchitecturalPlan = true;
                inCompletedTasks = false;
                inFinalStructure = false;
                description += 'üìã **–ü–õ–ê–ù –†–ê–ó–†–ê–ë–û–¢–ö–ò:**\n';
                continue;
            }
            
            if (line.includes('‚úÖ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –≠–¢–ê–ü–´:')) {
                inArchitecturalPlan = false;
                inCompletedTasks = true;
                inFinalStructure = false;
                description += '\n‚úÖ **–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –≠–¢–ê–ü–´:**\n';
                continue;
            }
            
            if (line.includes('üîß –ò–¢–û–ì–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:')) {
                inArchitecturalPlan = false;
                inCompletedTasks = false;
                inFinalStructure = true;
                description += '\nüîß **–ò–¢–û–ì–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:**\n';
                continue;
            }
            
            if (line.includes('HTML_START') || line.includes('PACKAGE_JSON_START')) {
                // –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–¥–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                break;
            }
            
            if (inArchitecturalPlan) {
                if (line && line.match(/^\d+\./)) {
                    // –≠—Ç–æ –ø—É–Ω–∫—Ç –ø–ª–∞–Ω–∞
                    planSteps.push(line);
                    description += line + '\n';
                }
            } else if (inCompletedTasks || inFinalStructure) {
                if (line) {
                    description += line + '\n';
                }
            }
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≤ –∫—Ä–∞—Ç–∫–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏
        if (planSteps.length > 0) {
            var shortDescription = 'üìã **–ü–õ–ê–ù –†–ê–ó–†–ê–ë–û–¢–ö–ò:**\n';
            shortDescription += planSteps.slice(0, 3).join('\n'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—É–Ω–∫—Ç–∞
            if (planSteps.length > 3) {
                shortDescription += `\n... –∏ –µ—â–µ ${planSteps.length - 3} —ç—Ç–∞–ø–æ–≤`;
            }
            shortDescription += '\n\n‚úÖ **–†–ï–ó–£–õ–¨–¢–ê–¢:** –°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!';
            return shortDescription;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if (fullText.includes('HTML_START')) {
            description += '\n‚úÖ **–†–ï–ó–£–õ–¨–¢–ê–¢:** HTML —Å–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!';
        } else if (fullText.includes('PACKAGE_JSON_START')) {
            description += '\n‚úÖ **–†–ï–ó–£–õ–¨–¢–ê–¢:** Next.js –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!';
        }
        
        return description.trim();
    }

    generateLiteDescription(fullText) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        var htmlMatch = fullText.match(/HTML_START\s*`{0,3}html\s*([\s\S]*?)\s*`{0,3}\s*HTML_END/);
        if (!htmlMatch || !htmlMatch[1]) {
            return '‚úÖ HTML —Å–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É.';
        }

        var html = htmlMatch[1];
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        var titleMatch = html.match(/<title>(.*?)<\/title>/i);
        var title = titleMatch ? titleMatch[1].trim() : '–í–µ–±-—Å–∞–π—Ç';
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        var h1Match = html.match(/<h1[^>]*>(.*?)<\/h1>/i);
        var mainHeading = h1Match ? h1Match[1].trim() : '';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∞–π—Ç–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        var siteType = this.detectSiteType(html);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        var description = `‚úÖ –°–æ–∑–¥–∞–Ω ${siteType} "${title}"`;
        
        if (mainHeading && mainHeading !== title) {
            description += ` —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "${mainHeading}"`;
        }
        
        description += '. –°–∞–π—Ç –≤–∫–ª—é—á–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å—Ç–∫–æ–π, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.';
        
        return description;
    }

    detectSiteType(html) {
        var lowerHtml = html.toLowerCase();
        
        if (lowerHtml.includes('–º–∞–≥–∞–∑–∏–Ω') || lowerHtml.includes('store') || lowerHtml.includes('–∫—É–ø–∏—Ç—å') || lowerHtml.includes('—Ç–æ–≤–∞—Ä') || lowerHtml.includes('—Ü–µ–Ω–∞')) {
            return '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω';
        } else if (lowerHtml.includes('–∫–æ–º–ø–∞–Ω–∏—è') || lowerHtml.includes('company') || lowerHtml.includes('–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π') || lowerHtml.includes('–±–∏–∑–Ω–µ—Å')) {
            return '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç';
        } else if (lowerHtml.includes('–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ') || lowerHtml.includes('portfolio') || lowerHtml.includes('—Ä–∞–±–æ—Ç—ã') || lowerHtml.includes('–ø—Ä–æ–µ–∫—Ç—ã')) {
            return '—Å–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ';
        } else if (lowerHtml.includes('–±–ª–æ–≥') || lowerHtml.includes('blog') || lowerHtml.includes('—Å—Ç–∞—Ç—å–∏') || lowerHtml.includes('–Ω–æ–≤–æ—Å—Ç–∏')) {
            return '–±–ª–æ–≥';
        } else if (lowerHtml.includes('–ª–µ–Ω–¥–∏–Ω–≥') || lowerHtml.includes('landing') || lowerHtml.includes('–ø—Ä–æ–¥–∞–∂–∞') || lowerHtml.includes('—É—Å–ª—É–≥–∏')) {
            return '–ª–µ–Ω–¥–∏–Ω–≥-—Å—Ç—Ä–∞–Ω–∏—Ü–∞';
        } else if (lowerHtml.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω') || lowerHtml.includes('–∫–∞—Ñ–µ') || lowerHtml.includes('–º–µ–Ω—é') || lowerHtml.includes('–µ–¥–∞')) {
            return '—Å–∞–π—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞';
        } else if (lowerHtml.includes('–æ—Ç–µ–ª—å') || lowerHtml.includes('hotel') || lowerHtml.includes('–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ') || lowerHtml.includes('–Ω–æ–º–µ—Ä')) {
            return '—Å–∞–π—Ç –æ—Ç–µ–ª—è';
        } else {
            return '–≤–µ–±-—Å–∞–π—Ç';
        }
    }

    updatePreview(content) {
        console.log('üîÑ updatePreview called with content length:', content ? content.length : 0);
        console.log('üîÑ Preview iframe exists:', !!this.previewIframe);
        if (!content || !this.previewIframe) {
            console.log('‚ùå updatePreview: missing content or iframe');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Next.js –ø—Ä–æ–µ–∫—Ç
        if (content.includes('PACKAGE_JSON_START')) {
            // –î–ª—è Next.js –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∂–∏–≤–æ–π —Å–µ—Ä–≤–µ—Ä
            if (this.currentConversationId) {
                this.generateWebsitePreview(this.currentConversationId, this.previewIframe);
            }
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ HTML_START (Lite mode)
        if (content.includes('HTML_START')) {
            console.log('üéØ Found HTML_START, extracting HTML...');
            var htmlMatch = content.match(/HTML_START\s*`{0,3}html\s*([\s\S]*?)\s*`{0,3}\s*HTML_END/);
            console.log('üîç HTML match result:', htmlMatch);
            if (htmlMatch && htmlMatch[1]) {
                var html = htmlMatch[1].trim();
                console.log('‚úÖ HTML extracted, setting iframe content, length:', html.length);
                console.log('‚úÖ First 200 chars of HTML:', html.substring(0, 200));
                this.previewIframe.srcdoc = html;
                this.lastGeneratedHtml = html; // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                this.hideRestoreButton(); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                console.log('‚úÖ Iframe content set successfully');
                return;
            } else {
                console.log('‚ùå HTML extraction failed, trying alternative patterns...');
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                var altPatterns = [
                    /HTML_START\s*```html\s*([\s\S]*?)\s*```\s*HTML_END/,
                    /HTML_START\s*```\s*([\s\S]*?)\s*```\s*HTML_END/,
                    /HTML_START\s*([\s\S]*?)\s*HTML_END/,
                    /```html\s*([\s\S]*?)\s*```/
                ];
                
                for (var i = 0; i < altPatterns.length; i++) {
                    var match = content.match(altPatterns[i]);
                    if (match && match[1]) {
                        var html = match[1].trim();
                        console.log('‚úÖ HTML found with pattern', i, 'length:', html.length);
                        this.previewIframe.srcdoc = html;
                        this.lastGeneratedHtml = html; // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                        this.hideRestoreButton(); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                        return;
                    }
                }
                
                console.log('‚ùå All HTML extraction patterns failed');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        var hasFileStructure = content.includes('FILE_STRUCTURE_START');

        if (hasFileStructure) {
            this.displayFileStructure(content);
        } else {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –∏–∑–≤–ª–µ–∫–∞–µ–º HTML –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏
        var htmlMatch = content.match(/NEW_PAGE_START([\s\S]*?)NEW_PAGE_END/);
        if (htmlMatch) {
            var html = htmlMatch[1].trim();
            this.previewIframe.srcdoc = html;
            this.lastGeneratedHtml = html; // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            this.hideRestoreButton(); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        } else {
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ HTML –∫–æ–¥ –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ (fallback)
            var htmlCodeMatch = content.match(/```html([\s\S]*?)```/);
            if (htmlCodeMatch) {
                var html = htmlCodeMatch[1].trim();
                this.previewIframe.srcdoc = html;
                this.lastGeneratedHtml = html; // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                this.hideRestoreButton(); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                }
            }
        }
    }

    displayFileStructure(content) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        var structureMatch = content.match(/FILE_STRUCTURE_START([\s\S]*?)FILE_STRUCTURE_END/);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–µ, —Ç–∞–∫ –∏ –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        // –°—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (HTML/CSS/JS)
        var htmlMatch = content.match(/HTML_START([\s\S]*?)HTML_END/);
        var mainCssMatch = content.match(/MAIN_CSS_START([\s\S]*?)MAIN_CSS_END/);
        var componentsCssMatch = content.match(/COMPONENTS_CSS_START([\s\S]*?)COMPONENTS_CSS_END/);
        var responsiveCssMatch = content.match(/RESPONSIVE_CSS_START([\s\S]*?)RESPONSIVE_CSS_END/);
        var mainJsMatch = content.match(/MAIN_JS_START([\s\S]*?)MAIN_JS_END/);
        var componentsJsMatch = content.match(/COMPONENTS_JS_START([\s\S]*?)COMPONENTS_JS_END/);
        var utilsJsMatch = content.match(/UTILS_JS_START([\s\S]*?)UTILS_JS_END/);

        // –ù–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (Next.js)
        var packageJsonMatch = content.match(/PACKAGE_JSON_START([\s\S]*?)PACKAGE_JSON_END/);
        var tsconfigMatch = content.match(/TSCONFIG_START([\s\S]*?)TSCONFIG_END/);
        var tailwindConfigMatch = content.match(/TAILWIND_CONFIG_START([\s\S]*?)TAILWIND_CONFIG_END/);
        var nextConfigMatch = content.match(/NEXT_CONFIG_START([\s\S]*?)NEXT_CONFIG_END/);
        var layoutTsxMatch = content.match(/LAYOUT_TSX_START([\s\S]*?)LAYOUT_TSX_END/);
        var pageTsxMatch = content.match(/PAGE_TSX_START([\s\S]*?)PAGE_TSX_END/);
        var globalsCssMatch = content.match(/GLOBALS_CSS_START([\s\S]*?)GLOBALS_CSS_END/);

        // –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        var heroComponentMatch = content.match(/HERO_COMPONENT_START([\s\S]*?)HERO_COMPONENT_END/);
        var featuresComponentMatch = content.match(/FEATURES_COMPONENT_START([\s\S]*?)FEATURES_COMPONENT_END/);
        var footerComponentMatch = content.match(/FOOTER_COMPONENT_START([\s\S]*?)FOOTER_COMPONENT_END/);
        var buttonComponentMatch = content.match(/BUTTON_COMPONENT_START([\s\S]*?)BUTTON_COMPONENT_END/);
        var cardComponentMatch = content.match(/CARD_COMPONENT_START([\s\S]*?)CARD_COMPONENT_END/);
        var containerComponentMatch = content.match(/CONTAINER_COMPONENT_START([\s\S]*?)CONTAINER_COMPONENT_END/);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —Ñ–∞–π–ª–∞–º–∏ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        this.projectFiles = {};

        // –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (htmlMatch) this.projectFiles['index.html'] = htmlMatch[1].trim();
        if (mainCssMatch) this.projectFiles['styles/main.css'] = mainCssMatch[1].trim();
        if (componentsCssMatch) this.projectFiles['styles/components.css'] = componentsCssMatch[1].trim();
        if (responsiveCssMatch) this.projectFiles['styles/responsive.css'] = responsiveCssMatch[1].trim();
        if (mainJsMatch) this.projectFiles['scripts/main.js'] = mainJsMatch[1].trim();
        if (componentsJsMatch) this.projectFiles['scripts/components.js'] = componentsJsMatch[1].trim();
        if (utilsJsMatch) this.projectFiles['scripts/utils.js'] = utilsJsMatch[1].trim();

        // –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã Next.js (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (packageJsonMatch) this.projectFiles['package.json'] = packageJsonMatch[1].trim();
        if (tsconfigMatch) this.projectFiles['tsconfig.json'] = tsconfigMatch[1].trim();
        if (tailwindConfigMatch) this.projectFiles['tailwind.config.js'] = tailwindConfigMatch[1].trim();
        if (nextConfigMatch) this.projectFiles['next.config.js'] = nextConfigMatch[1].trim();
        if (layoutTsxMatch) this.projectFiles['app/layout.tsx'] = layoutTsxMatch[1].trim();
        if (pageTsxMatch) this.projectFiles['app/page.tsx'] = pageTsxMatch[1].trim();
        if (globalsCssMatch) this.projectFiles['app/globals.css'] = globalsCssMatch[1].trim();

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if (heroComponentMatch) this.projectFiles['app/components/sections/Hero.tsx'] = heroComponentMatch[1].trim();
        if (featuresComponentMatch) this.projectFiles['app/components/sections/Features.tsx'] = featuresComponentMatch[1].trim();
        if (footerComponentMatch) this.projectFiles['app/components/sections/Footer.tsx'] = footerComponentMatch[1].trim();
        if (buttonComponentMatch) this.projectFiles['app/components/ui/Button.tsx'] = buttonComponentMatch[1].trim();
        if (cardComponentMatch) this.projectFiles['app/components/ui/Card.tsx'] = cardComponentMatch[1].trim();
        if (containerComponentMatch) this.projectFiles['app/components/ui/Container.tsx'] = containerComponentMatch[1].trim();

        // –î–ª—è Next.js –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –¥–ª—è –æ–±—ã—á–Ω—ã—Ö - –ø—Ä–µ–≤—å—é
        var isNextjsProject = packageJsonMatch || layoutTsxMatch;

        if (isNextjsProject) {
            // –î–ª—è Next.js –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
            this.showNextjsInstructions();
        } else if (this.projectFiles['index.html']) {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ–±—ä–µ–¥–∏–Ω—è–µ–º HTML —Å CSS –∏ JS –¥–ª—è –ø—Ä–µ–≤—å—é
            var fullHtml = this.combineFilesForPreview();
            this.previewIframe.srcdoc = fullHtml;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        this.showFileExplorer();
    }

    combineFilesForPreview() {
        var html = this.projectFiles['index.html'];
        var mainCss = this.projectFiles['styles/main.css'];
        var componentsCss = this.projectFiles['styles/components.css'];
        var responsiveCss = this.projectFiles['styles/responsive.css'];
        var mainJs = this.projectFiles['scripts/main.js'];
        var componentsJs = this.projectFiles['scripts/components.js'];
        var utilsJs = this.projectFiles['scripts/utils.js'];

        // –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∏–ª–∏ –∏ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ inline –≤–µ—Ä—Å–∏–∏
        var combinedHtml = html;

        // –ó–∞–º–µ–Ω—è–µ–º CSS —Å—Å—ã–ª–∫–∏
        if (mainCss) {
            combinedHtml = combinedHtml.replace(
                '<link rel="stylesheet" href="styles/main.css">',
                `<style>${mainCss}</style>`
            );
        }
        if (componentsCss) {
            combinedHtml = combinedHtml.replace(
                '<link rel="stylesheet" href="styles/components.css">',
                `<style>${componentsCss}</style>`
            );
        }
        if (responsiveCss) {
            combinedHtml = combinedHtml.replace(
                '<link rel="stylesheet" href="styles/responsive.css">',
                `<style>${responsiveCss}</style>`
            );
        }

        // –ó–∞–º–µ–Ω—è–µ–º JS —Å—Å—ã–ª–∫–∏
        if (utilsJs) {
            combinedHtml = combinedHtml.replace(
                '<script src="scripts/utils.js"></script>',
                `<script>${utilsJs}</script>`
            );
        }
        if (componentsJs) {
            combinedHtml = combinedHtml.replace(
                '<script src="scripts/components.js"></script>',
                `<script>${componentsJs}</script>`
            );
        }
        if (mainJs) {
            combinedHtml = combinedHtml.replace(
                '<script src="scripts/main.js"></script>',
                `<script>${mainJs}</script>`
            );
        }

        return combinedHtml;
    }

    showFileExplorer() {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫
        var fileExplorer = document.getElementById('file-explorer');
        if (!fileExplorer) {
            fileExplorer = document.createElement('div');
            fileExplorer.id = 'file-explorer';
            fileExplorer.className = 'file-explorer';

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–µ–≤—å—é
            var previewPanel = document.querySelector('.preview-panel');
            if (previewPanel) {
                previewPanel.insertAdjacentElement('afterend', fileExplorer);
            }
        }

        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞
        var explorerHtml = `
            <div class="file-explorer-header">
                <h3>üìÅ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞</h3>
                <button class="download-project-btn" onclick="aiEditor.downloadProject()">
                    üíæ –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
                </button>
            </div>
            <div class="file-list">
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫
        Object.keys(this.projectFiles).forEach(filePath => {
            if (this.projectFiles[filePath]) {
                var fileName = filePath.split('/').pop();
                var fileIcon = this.getFileIcon(fileName);
                explorerHtml += `
                    <div class="file-item" onclick="aiEditor.showFileContent('${filePath}')">
                        <span class="file-icon">${fileIcon}</span>
                        <span class="file-name">${filePath}</span>
                        <button class="download-file-btn" onclick="event.stopPropagation(); aiEditor.downloadFile('${filePath}')">
                            ‚¨áÔ∏è
                        </button>
                    </div>
                `;
            }
        });

        explorerHtml += '</div>';
        fileExplorer.innerHTML = explorerHtml;
    }

    getFileIcon(fileName) {
        if (fileName.endsWith('.html')) return 'üåê';
        if (fileName.endsWith('.css')) return 'üé®';
        if (fileName.endsWith('.js')) return '‚ö°';
        if (fileName.endsWith('.tsx') || fileName.endsWith('.ts')) return '‚öõÔ∏è';
        if (fileName.endsWith('.json')) return 'üìã';
        if (fileName === 'package.json') return 'üì¶';
        if (fileName.includes('config')) return '‚öôÔ∏è';
        if (fileName.includes('tailwind')) return 'üé®';
        return 'üìÑ';
    }

    showNextjsInstructions() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É Next.js –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–µ–≤—å—é
        if (this.previewIframe) {
            var instructionsHtml = `
                <!DOCTYPE html>
                <html lang="ru">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É Next.js –ø—Ä–æ–µ–∫—Ç–∞</title>
                    <style>
                        body {
                            font-family: -apple-system, BlinkMacSystemFont, 'Inter', sans-serif;
                            line-height: 1.6;
                            color: #374151;
                            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
                            margin: 0;
                            padding: 2rem;
                        }
                        .container {
                            max-width: 800px;
                            margin: 0 auto;
                            background: white;
                            border-radius: 16px;
                            padding: 2rem;
                            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
                        }
                        h1 {
                            color: #1f2937;
                            margin-bottom: 1.5rem;
                            font-size: 2rem;
                            font-weight: 700;
                        }
                        h2 {
                            color: #374151;
                            margin-top: 2rem;
                            margin-bottom: 1rem;
                            font-size: 1.25rem;
                            font-weight: 600;
                        }
                        .step {
                            background: #f9fafb;
                            border: 1px solid #e5e7eb;
                            border-radius: 8px;
                            padding: 1rem;
                            margin: 1rem 0;
                        }
                        .command {
                            background: #1f2937;
                            color: #e5e7eb;
                            padding: 0.75rem 1rem;
                            border-radius: 6px;
                            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
                            font-size: 0.875rem;
                            margin: 0.5rem 0;
                            overflow-x: auto;
                        }
                        .note {
                            background: #dbeafe;
                            border-left: 4px solid #3b82f6;
                            padding: 1rem;
                            margin: 1rem 0;
                            border-radius: 0 8px 8px 0;
                        }
                        .success {
                            background: #d1fae5;
                            border-left: 4px solid #10b981;
                            padding: 1rem;
                            margin: 1rem 0;
                            border-radius: 0 8px 8px 0;
                        }
                        .icon {
                            font-size: 1.5rem;
                            margin-right: 0.5rem;
                        }
                        ul {
                            padding-left: 1.5rem;
                        }
                        li {
                            margin-bottom: 0.5rem;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1><span class="icon">‚öõÔ∏è</span>Next.js –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!</h1>

                        <div class="success">
                            <strong>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</strong> –í–∞—à Next.js –ø—Ä–æ–µ–∫—Ç —Å TypeScript –∏ Tailwind CSS –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
                        </div>

                        <h2>üìã –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç:</h2>

                        <div class="step">
                            <strong>1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:</strong>
                            <div class="command">npm install</div>
                            <em>–∏–ª–∏</em>
                            <div class="command">yarn install</div>
                        </div>

                        <div class="step">
                            <strong>2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ dev —Å–µ—Ä–≤–µ—Ä:</strong>
                            <div class="command">npm run dev</div>
                            <em>–∏–ª–∏</em>
                            <div class="command">yarn dev</div>
                        </div>

                        <div class="step">
                            <strong>3. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:</strong>
                            <div class="command">http://localhost:3000</div>
                        </div>

                        <h2>üõ†Ô∏è –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ø—Ä–æ–µ–∫—Ç:</h2>
                        <ul>
                            <li><strong>Next.js 14+</strong> —Å App Router</li>
                            <li><strong>TypeScript</strong> –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏</li>
                            <li><strong>Tailwind CSS</strong> –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏</li>
                            <li><strong>–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</strong> –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
                            <li><strong>Responsive –¥–∏–∑–∞–π–Ω</strong> (Mobile-first)</li>
                            <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</strong> —Å next/image</li>
                        </ul>

                        <div class="note">
                            <strong>üí° –°–æ–≤–µ—Ç:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª–æ–≤—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ —Å–ø—Ä–∞–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.
                        </div>

                        <h2>üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:</h2>
                        <div class="command">
project-name/
‚îú‚îÄ‚îÄ üì¶ package.json          # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å–∫—Ä–∏–ø—Ç—ã
‚îú‚îÄ‚îÄ ‚öôÔ∏è tsconfig.json         # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TypeScript
‚îú‚îÄ‚îÄ üé® tailwind.config.js    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tailwind CSS
‚îú‚îÄ‚îÄ ‚öôÔ∏è next.config.js        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Next.js
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ ‚öõÔ∏è layout.tsx         # –û—Å–Ω–æ–≤–Ω–æ–π layout
‚îÇ   ‚îú‚îÄ‚îÄ ‚öõÔ∏è page.tsx           # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
‚îÇ   ‚îú‚îÄ‚îÄ üé® globals.css        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
‚îÇ   ‚îî‚îÄ‚îÄ components/
‚îÇ       ‚îú‚îÄ‚îÄ ui/              # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚îÇ       ‚îú‚îÄ‚îÄ sections/        # –°–µ–∫—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
‚îÇ       ‚îî‚îÄ‚îÄ layout/          # Layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚îî‚îÄ‚îÄ lib/
    ‚îú‚îÄ‚îÄ ‚öõÔ∏è types.ts           # TypeScript —Ç–∏–ø—ã
    ‚îî‚îÄ‚îÄ ‚öõÔ∏è utils.ts           # –£—Ç–∏–ª–∏—Ç—ã
                        </div>

                        <div class="success">
                            <strong>–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!</strong> –í–∞—à —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Next.js –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
                        </div>
                    </div>
                </body>
                </html>
            `;
            this.previewIframe.srcdoc = instructionsHtml;
        }
    }

    showFileContent(filePath) {
        var content = this.projectFiles[filePath];
        if (!content) return;

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        var modal = document.createElement('div');
        modal.className = 'file-modal';
        modal.innerHTML = `
            <div class="file-modal-content">
                <div class="file-modal-header">
                    <h3>${filePath}</h3>
                    <button class="close-file-modal" onclick="this.closest('.file-modal').remove()">√ó</button>
                </div>
                <div class="file-modal-body">
                    <pre><code>${content}</code></pre>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    downloadFile(filePath) {
        var content = this.projectFiles[filePath];
        if (!content) return;

        var blob = new Blob([content], { type: 'text/plain' });
        var url = URL.createObjectURL(blob);
        var a = document.createElement('a');
        a.href = url;
        a.download = filePath.split('/').pop();
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    downloadProject() {
        if (!this.projectFiles) return;

        // –°–æ–∑–¥–∞–µ–º ZIP —Ñ–∞–π–ª (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        var zip = new Map();

        Object.keys(this.projectFiles).forEach(filePath => {
            if (this.projectFiles[filePath]) {
                zip.set(filePath, this.projectFiles[filePath]);
            }
        });

        // –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ZIP
        Object.keys(this.projectFiles).forEach(filePath => {
            if (this.projectFiles[filePath]) {
                setTimeout(() => {
                    this.downloadFile(filePath);
                }, 100);
            }
        });
    }

    startGeneration() {
        if (this.sendBtn) {
            this.sendBtn.disabled = true;
            this.sendBtn.innerHTML = '<div class="loading-spinner"></div>';
        }

        if (this.typingIndicator) {
            this.typingIndicator.classList.remove('hidden');
            this.startThinkingAnimation();
        }

        this.updateStatus('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–π—Ç–∞...');
    }

    stopGeneration() {
        if (this.sendBtn) {
            this.sendBtn.disabled = false;
            this.sendBtn.innerHTML = '<span id="send-btn-text">üì§</span>';
        }

        if (this.typingIndicator) {
            this.typingIndicator.classList.add('hidden');
            this.stopThinkingAnimation();
        }
    }
    
    startThinkingAnimation() {
        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º—ã—Å–ª–µ–π
        const historyContainer = this.typingIndicator.querySelector('.thinking-history');
        if (historyContainer) {
            historyContainer.innerHTML = '';
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –º—ã—Å–ª—å
        this.updateCurrentThought('üí≠', '–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...');
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º—ã—Å–ª–µ–π LLM
        this.startRealThinkingPolling();
    }
    
    nextThinkingThought() {
        const thoughts = [
            { icon: 'üí≠', text: '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...' },
            { icon: 'üèóÔ∏è', text: '–°–æ–∑–¥–∞—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...' },
            { icon: 'üìã', text: '–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω...' },
            { icon: 'üé®', text: '–ü—Ä–æ–¥—É–º—ã–≤–∞—é –¥–∏–∑–∞–π–Ω –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É...' },
            { icon: 'üë®‚Äçüíª', text: '–ì–µ–Ω–µ—Ä–∏—Ä—É—é HTML –∫–æ–¥...' },
            { icon: 'üéØ', text: '–î–æ–±–∞–≤–ª—è—é CSS —Å—Ç–∏–ª–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏...' },
            { icon: '‚ö°', text: '–°–æ–∑–¥–∞—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...' },
            { icon: 'üì±', text: '–û–±–µ—Å–ø–µ—á–∏–≤–∞—é –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å...' },
            { icon: '‚ú®', text: '–ó–∞–≤–µ—Ä—à–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞...' },
            { icon: 'üîç', text: '–ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞...' },
            { icon: 'üöÄ', text: '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç...' }
        ];
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–µ–∫—É—â—É—é –º—ã—Å–ª—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.moveCurrentToHistory();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –º—ã—Å–ª—å
        const thought = thoughts[this.thinkingStep % thoughts.length];
        this.updateCurrentThought(thought.icon, thought.text);
        
        this.thinkingStep++;
    }
    
    updateCurrentThought(icon, text) {
        const currentContainer = this.typingIndicator.querySelector('.thinking-current');
        if (currentContainer) {
            const iconElement = currentContainer.querySelector('.thinking-icon');
            const textElement = currentContainer.querySelector('.thinking-text');
            
            if (iconElement) iconElement.textContent = icon;
            if (textElement) textElement.textContent = text;
        }
    }
    
    moveCurrentToHistory() {
        const currentContainer = this.typingIndicator.querySelector('.thinking-current');
        const historyContainer = this.typingIndicator.querySelector('.thinking-history');
        
        if (currentContainer && historyContainer) {
            const icon = currentContainer.querySelector('.thinking-icon').textContent;
            const text = currentContainer.querySelector('.thinking-text').textContent;
            
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏
            const historyItem = document.createElement('div');
            historyItem.className = 'thinking-item';
            historyItem.innerHTML = `
                <div class="thinking-icon">${icon}</div>
                <div class="thinking-text">${text}</div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            historyContainer.appendChild(historyItem);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            const items = historyContainer.querySelectorAll('.thinking-item');
            if (items.length > 5) {
                items[0].remove();
            }
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            historyContainer.scrollTop = historyContainer.scrollHeight;
        }
    }
    
    stopThinkingAnimation() {
        if (this.thinkingInterval) {
            clearInterval(this.thinkingInterval);
            this.thinkingInterval = null;
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling —Ä–µ–∞–ª—å–Ω—ã—Ö –º—ã—Å–ª–µ–π
        this.stopRealThinkingPolling();
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        const historyContainer = this.typingIndicator.querySelector('.thinking-history');
        if (historyContainer) {
            historyContainer.innerHTML = '';
        }
        
        this.thinkingStep = 0;
    }
    
    startRealThinkingPolling() {
        if (!this.currentConversationId) return;
        
        this.thinkingPollingInterval = setInterval(async () => {
            try {
                const response = await fetch(`/api/ai-editor/thoughts/${this.currentConversationId}`, {
                    headers: {
                        'Authorization': `Bearer ${this.authToken}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    const thoughts = data.thoughts || [];
                    
                    if (thoughts.length > 0) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –º—ã—Å–ª—å –∫–∞–∫ —Ç–µ–∫—É—â—É—é
                        const lastThought = thoughts[thoughts.length - 1];
                        this.updateCurrentThought(lastThought.icon, lastThought.text);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º—ã—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
                        this.updateThinkingHistory(thoughts.slice(0, -1));
                    }
                }
            } catch (error) {
                console.error('Error fetching LLM thoughts:', error);
            }
        }, 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    }
    
    updateThinkingHistory(thoughts) {
        const historyContainer = this.typingIndicator.querySelector('.thinking-history');
        if (!historyContainer) return;
        
        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        historyContainer.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º—ã—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
        const recentThoughts = thoughts.slice(-5);
        recentThoughts.forEach(thought => {
            const historyItem = document.createElement('div');
            historyItem.className = 'thinking-item';
            historyItem.innerHTML = `
                <div class="thinking-icon">${thought.icon}</div>
                <div class="thinking-text">${thought.text}</div>
            `;
            historyContainer.appendChild(historyItem);
        });
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        historyContainer.scrollTop = historyContainer.scrollHeight;
    }
    
    stopRealThinkingPolling() {
        if (this.thinkingPollingInterval) {
            clearInterval(this.thinkingPollingInterval);
            this.thinkingPollingInterval = null;
        }
    }
    
    showError(message) {
        if (!this.errorContainer) return;

        this.errorContainer.innerHTML = `
            <div class="error-message">
                ‚ùå ${message}
            </div>
        `;

        setTimeout(() => {
            this.errorContainer.innerHTML = '';
        }, 5000);

        this.updateStatus('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    }

    updateStatus(status) {
        if (this.statusText) {
            this.statusText.textContent = status;
        }
    }

    scrollToBottom() {
        if (this.chatMessages) {
            this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        }
    }

    autoResizeInput() {
        if (!this.chatInput) return;

        this.chatInput.style.height = 'auto';
        this.chatInput.style.height = Math.min(this.chatInput.scrollHeight, 120) + 'px';
    }

    toggleSendButton() {
        if (!this.sendBtn || !this.chatInput) {
            console.log('toggleSendButton: missing elements', {
                sendBtn: !!this.sendBtn,
                chatInput: !!this.chatInput
            });
            return;
        }

        var hasText = this.chatInput.value.trim().length > 0;
        this.sendBtn.disabled = !hasText;

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('toggleSendButton:', {
            hasText,
            disabled: this.sendBtn.disabled,
            inputValue: this.chatInput.value,
            inputLength: this.chatInput.value.length
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        if (hasText && this.sendBtn.disabled) {
            console.error('Button should be enabled but is still disabled!');
        }
    }

    async copyHtml() {
        var iframe = this.previewIframe;
        if (!iframe || !iframe.srcdoc) {
            this.showError('–ù–µ—Ç HTML –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        try {
            await navigator.clipboard.writeText(iframe.srcdoc);
            this.updateStatus('HTML —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        } catch (error) {
            console.error('Copy failed:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å HTML');
        }
    }

    downloadHtml() {
        var iframe = this.previewIframe;
        if (!iframe || !iframe.srcdoc) {
            this.showError('–ù–µ—Ç HTML –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
            return;
        }

        var blob = new Blob([iframe.srcdoc], { type: 'text/html' });
        var url = URL.createObjectURL(blob);
        var a = document.createElement('a');
        a.href = url;
        a.download = 'website.html';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        this.updateStatus('HTML —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω');
    }


    showDeployModal() {
        if (!this.previewIframe || !this.previewIframe.srcdoc) {
            this.showError('–ù–µ—Ç HTML –¥–ª—è –¥–µ–ø–ª–æ—è');
            return;
        }

        this.deployModal.style.display = 'flex';
        this.deployTitle.value = '';
        this.deployDescription.value = '';
        this.hideDeployStatus();
    }

    hideDeployModal() {
        this.deployModal.style.display = 'none';
        this.hideDeployStatus();

        // Reset form and state
        this.deployTitle.value = '';
        this.deployDescription.value = '';
        this.confirmDeployBtn.style.display = 'block';
        this.lastDeploymentResult = null;
    }

    showDeployStatus(message, type = 'loading') {
        this.deployStatus.style.display = 'block';
        this.deployStatus.className = `deploy-status ${type}`;
        this.deployStatus.querySelector('.status-message').textContent = message;
    }

    hideDeployStatus() {
        this.deployStatus.style.display = 'none';
        this.deployActions.style.display = 'none';
    }

    async deployWebsite() {
        var title = this.deployTitle.value.trim();
        if (!title) {
            this.showError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞');
            return;
        }

        if (!this.previewIframe || !this.previewIframe.srcdoc) {
            this.showError('–ù–µ—Ç HTML –¥–ª—è –¥–µ–ø–ª–æ—è');
            return;
        }

        var token = localStorage.getItem('windexai_token');
        if (!token) {
            this.showError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            return;
        }

        this.showDeployStatus('–î–µ–ø–ª–æ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...', 'loading');
        this.confirmDeployBtn.disabled = true;

        try {
            // Extract HTML content
            var htmlContent = this.previewIframe.srcdoc;

            // Create deployment data
            var deploymentData = {
                title: title,
                description: this.deployDescription.value.trim() || null,
                html_content: htmlContent,
                css_content: null, // We'll extract CSS from HTML if needed
                js_content: null   // We'll extract JS from HTML if needed
            };

            var response = await fetch('/api/deploy/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(deploymentData)
            });

            if (!response.ok) {
                var errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ';
                try {
                    var errorData = await response.json();
                    errorMessage = errorData.detail || errorMessage;
                } catch (e) {
                    errorMessage = `HTTP ${response.status}: ${response.statusText}`;
                }
                throw new Error(errorMessage);
            }

            var result = await response.json();

            // Store deployment result
            this.lastDeploymentResult = result;

            this.showDeployStatus(
                `‚úÖ –°–∞–π—Ç "${result.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω!`,
                'success'
            );

            // Show action buttons
            this.deployActions.style.display = 'flex';

            // Hide deploy button and show success state
            this.confirmDeployBtn.style.display = 'none';

        } catch (error) {
            console.error('Deploy error:', error);
            var errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ';
            this.showDeployStatus(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`, 'error');
        } finally {
            this.confirmDeployBtn.disabled = false;
        }
    }

    openDeployedSite() {
        if (this.lastDeploymentResult && this.lastDeploymentResult.full_url) {
            window.open(this.lastDeploymentResult.full_url, '_blank');
        }
    }

    async copyDeploymentUrl() {
        if (this.lastDeploymentResult && this.lastDeploymentResult.full_url) {
            try {
                await navigator.clipboard.writeText(this.lastDeploymentResult.full_url);
                this.showDeployStatus('üìã URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
                setTimeout(() => {
                    this.hideDeployStatus();
                }, 2000);
            } catch (error) {
                console.error('Copy failed:', error);
                this.showDeployStatus('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL', 'error');
            }
        }
    }

    toggleEditMode() {
        this.editMode = !this.editMode;

        if (this.editMode) {
            this.enterEditMode();
        } else {
            this.exitEditMode();
        }
    }

    enterEditMode() {
        this.editModeBtn.textContent = '‚úÖ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
        this.editModeBtn.classList.add('edit-mode-active');

        // Add edit mode instructions
        this.addEditModeInstructions();

        // Make elements editable
        this.makeElementsEditable();

        this.updateStatus('–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }

    exitEditMode() {
        this.editModeBtn.textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
        this.editModeBtn.classList.remove('edit-mode-active');

        // Remove edit mode instructions
        this.removeEditModeInstructions();

        // Remove editable classes
        this.removeEditableClasses();

        // Remove edit prompt messages
        var existingEditPrompts = this.chatMessages.querySelectorAll('.edit-prompt-message');
        existingEditPrompts.forEach(prompt => prompt.remove());

        this.selectedElement = null;
        this.updateStatus('–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω.');
    }

    addEditModeInstructions() {
        var iframe = this.previewIframe;
        if (!iframe || !iframe.contentDocument) return;

        var instructions = iframe.contentDocument.createElement('div');
        instructions.className = 'edit-mode-instructions';
        instructions.textContent = '‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
        iframe.contentDocument.body.appendChild(instructions);
    }

    removeEditModeInstructions() {
        var iframe = this.previewIframe;
        if (!iframe || !iframe.contentDocument) return;

        var instructions = iframe.contentDocument.querySelector('.edit-mode-instructions');
        if (instructions) {
            instructions.remove();
        }
    }

    makeElementsEditable() {
        var iframe = this.previewIframe;
        if (!iframe || !iframe.contentDocument) return;

        var doc = iframe.contentDocument;

        // Find editable elements (headings, paragraphs, buttons, etc.)
        var editableSelectors = [
            'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
            'p', 'span', 'div[class*="title"]', 'div[class*="subtitle"]',
            'button', 'a', 'li', 'td', 'th'
        ];

        this.editableElements = [];

        editableSelectors.forEach(selector => {
            var elements = doc.querySelectorAll(selector);
            elements.forEach((element, index) => {
                if (element.textContent.trim() && !element.querySelector('script')) {
                    element.classList.add('editable-element');
                    element.setAttribute('data-element-id', `${selector}-${index}`);
                    element.setAttribute('data-element-type', selector);

                    // Add click handler
                    element.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        this.selectElement(element);
                    });

                    this.editableElements.push(element);
                }
            });
        });
    }

    getElementLabel(element) {
        var tagName = element.tagName.toLowerCase();

        var labels = {
            'h1': '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
            'h2': '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫',
            'h3': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3',
            'h4': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 4',
            'h5': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 5',
            'h6': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 6',
            'p': '–¢–µ–∫—Å—Ç',
            'button': '–ö–Ω–æ–ø–∫–∞',
            'a': '–°—Å—ã–ª–∫–∞',
            'li': '–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞',
            'td': '–Ø—á–µ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã',
            'th': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã'
        };

        return labels[tagName] || '–≠–ª–µ–º–µ–Ω—Ç';
    }

    selectElement(element) {
        // Remove previous selection
        if (this.selectedElement) {
            this.selectedElement.classList.remove('selected');
        }

        // Select new element
        this.selectedElement = element;
        element.classList.add('selected');

        // Show edit prompt in chat
        this.showElementEditPrompt(element);
    }

    showElementEditPrompt(element) {
        var elementType = this.getElementLabel(element);
        var currentText = element.textContent.trim();

        // Remove previous edit prompts
        var existingEditPrompts = this.chatMessages.querySelectorAll('.edit-prompt-message');
        existingEditPrompts.forEach(prompt => prompt.remove());

        // Add message to chat
        var messageDiv = document.createElement('div');
        messageDiv.className = 'message assistant-message edit-prompt-message';
        messageDiv.innerHTML = `
            <div class="message-content">
                <div class="message-text">
                    ‚úèÔ∏è <strong>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:</strong> ${elementType}<br>
                    <em>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</em> "${currentText}"<br><br>
                    –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä:<br>
                    ‚Ä¢ "–ò–∑–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç –Ω–∞ '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å'"<br>
                    ‚Ä¢ "–°–¥–µ–ª–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–æ–ª—å—à–µ"<br>
                    ‚Ä¢ "–ò–∑–º–µ–Ω–∏ —Ü–≤–µ—Ç –Ω–∞ —Å–∏–Ω–∏–π"
                </div>
            </div>
        `;

        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;

        // Focus on input
        this.chatInput.focus();
    }

    removeEditableClasses() {
        var iframe = this.previewIframe;
        if (!iframe || !iframe.contentDocument) return;

        // Remove all editable classes
        this.editableElements.forEach(element => {
            element.classList.remove('editable-element', 'selected');
            element.removeAttribute('data-element-id');
            element.removeAttribute('data-element-type');
        });

        this.editableElements = [];
    }

    // Resizable panels methods
    startDrag(e) {
        // Prevent default to avoid text selection
        e.preventDefault();
        e.stopPropagation();

        this.isDragging = true;
        this.startX = e.clientX;

        // Get current widths more reliably
        var containerRect = this.chatPanel.parentElement.getBoundingClientRect();
        var chatRect = this.chatPanel.getBoundingClientRect();

        this.startChatWidth = chatRect.width;
        this.containerWidth = containerRect.width;

        this.panelDivider.classList.add('dragging');
        document.body.style.cursor = 'col-resize';
        document.body.style.userSelect = 'none';

        // Add event listeners with passive: false for better control
        document.addEventListener('mousemove', this.boundOnDrag, { passive: false });
        document.addEventListener('mouseup', this.boundStopDrag, { passive: false });
    }

    onDrag(e) {
        if (!this.isDragging) return;

        e.preventDefault();

        var deltaX = e.clientX - this.startX;
        var newChatWidth = this.startChatWidth + deltaX;

        // Calculate percentage
        var chatPercentage = (newChatWidth / this.containerWidth) * 100;
        var previewPercentage = 100 - chatPercentage;

        // Apply constraints
        var minChatPercentage = 25; // Minimum 25% for chat
        var maxChatPercentage = 75; // Maximum 75% for chat

        if (chatPercentage >= minChatPercentage && chatPercentage <= maxChatPercentage) {
            // Use more stable CSS custom properties
            this.chatPanel.style.setProperty('--chat-width', `${chatPercentage}%`);
            this.previewPanel.style.setProperty('--preview-width', `${previewPercentage}%`);

            // Apply flex values
            this.chatPanel.style.flex = `0 0 ${chatPercentage}%`;
            this.previewPanel.style.flex = `0 0 ${previewPercentage}%`;
        }
    }

    stopDrag() {
        if (!this.isDragging) return;

        this.isDragging = false;
        this.panelDivider.classList.remove('dragging');
        document.body.style.cursor = '';
        document.body.style.userSelect = '';

        // Remove event listeners
        document.removeEventListener('mousemove', this.boundOnDrag);
        document.removeEventListener('mouseup', this.boundStopDrag);

        // Save panel sizes
        this.savePanelSizes();
    }

    savePanelSizes() {
        var chatPercentage = (this.chatPanel.offsetWidth / this.chatPanel.parentElement.offsetWidth) * 100;
        localStorage.setItem('windexai_chat_panel_size', chatPercentage.toString());
    }

    loadPanelSizes() {
        var savedSize = localStorage.getItem('windexai_chat_panel_size');
        if (savedSize) {
            var chatPercentage = parseFloat(savedSize);
            var previewPercentage = 100 - chatPercentage;

            // Apply constraints
            var minChatPercentage = 25;
            var maxChatPercentage = 75;

            if (chatPercentage >= minChatPercentage && chatPercentage <= maxChatPercentage) {
                this.chatPanel.style.flex = `0 0 ${chatPercentage}%`;
                this.previewPanel.style.flex = `0 0 ${previewPercentage}%`;
            }
        }
    }

    async editSelectedElement(editInstruction) {
        if (!this.selectedElement) {
            this.showError('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        var element = this.selectedElement;
        var elementType = element.getAttribute('data-element-type');
        var currentText = element.textContent.trim();

        // Add user message to chat
        this.addChatMessage('user', editInstruction);

        // Create edit request
        var editRequest = {
            element_type: elementType,
            current_text: currentText,
            edit_instruction: editInstruction,
            html_content: this.previewIframe.srcdoc
        };

        try {
            var token = localStorage.getItem('windexai_token');
            if (!token) {
                this.showError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                return;
            }

            this.startGeneration();

            var response = await fetch('/api/ai-editor/edit-element', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(editRequest)
            });

            if (!response.ok) {
                var errorData = await response.json();
                throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞');
            }

            var result = await response.json();

            // Add assistant response to chat
            this.addChatMessage('assistant', result.response);

            // Update preview with edited content
            this.updatePreview(result.html_content);

            // Exit edit mode
            this.exitEditMode();

            this.updateStatus('–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!');

        } catch (error) {
            console.error('Edit element error:', error);
            this.showError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`);
        } finally {
            this.stopGeneration();
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–æ–≤
    async loadConversations() {
        try {
            var token = localStorage.getItem('windexai_token');
            if (!token) return;

            var response = await fetch('/api/ai-editor/conversations', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                var data = await response.json();
                this.renderConversations(data.conversations);
            }
        } catch (error) {
            console.error('Error loading conversations:', error);
        }
    }

    renderConversations(conversations) {
        if (!this.conversationsList) return;

        this.conversationsList.innerHTML = '';

        if (conversations.length === 0) {
            this.conversationsList.innerHTML = `
                <div style="padding: 2rem; text-align: center; color: #6b7280;">
                    <p>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
                    <p style="font-size: 0.8rem;">–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</p>
                </div>
            `;
            return;
        }

        conversations.forEach(conv => {
            var convElement = document.createElement('div');
            convElement.className = 'conversation-item';
            if (conv.id === this.currentConversationId) {
                convElement.classList.add('active');
            }

            var date = new Date(conv.date).toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'short',
                hour: '2-digit',
                minute: '2-digit'
            });

            convElement.innerHTML = `
                <div class="conversation-title">${conv.title}</div>
                <div class="conversation-preview">${conv.preview}</div>
                <div class="conversation-meta">
                    <span class="conversation-date">${date}</span>
                    <span class="conversation-count">${conv.message_count}</span>
                </div>
                <div class="conversation-actions">
                    <button class="conversation-delete" onclick="event.stopPropagation(); aiEditor.deleteConversation(${conv.id})">üóëÔ∏è</button>
                </div>
            `;

            convElement.addEventListener('click', () => {
                this.loadConversation(conv.id);
            });

            this.conversationsList.appendChild(convElement);
        });
    }

    async loadConversation(conversationId) {
        try {
            var token = localStorage.getItem('windexai_token');
            if (!token) return;

            var response = await fetch(`/api/ai-editor/conversations/${conversationId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                var data = await response.json();
                this.currentConversationId = conversationId;
                this.displayConversation(data.conversation);
                this.loadConversations(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
            }
        } catch (error) {
            console.error('Error loading conversation:', error);
        }
    }

    displayConversation(conversation) {
        // –û—á–∏—â–∞–µ–º —á–∞—Ç
        this.chatMessages.innerHTML = '';

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        conversation.messages.forEach(msg => {
            this.addChatMessage(msg.role, msg.content);
        });

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        this.scrollToBottom();
    }

    async createNewProject() {
        try {
            var token = localStorage.getItem('windexai_token');
            if (!token) return;

            var response = await fetch('/api/ai-editor/conversations', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                var data = await response.json();
                this.currentConversationId = data.conversation_id;

                // –û—á–∏—â–∞–µ–º —á–∞—Ç
                this.chatMessages.innerHTML = '';

                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                this.addChatMessage('assistant', '–ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–∞–π—Ç–æ–≤. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Å–∞–π—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –µ–≥–æ –¥–ª—è –≤–∞—Å!');

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
                this.loadConversations();

                this.updateStatus('–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω');
            }
        } catch (error) {
            console.error('Error creating new project:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
        }
    }

    async deleteConversation(conversationId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?')) {
            return;
        }

        try {
            var token = localStorage.getItem('windexai_token');
            if (!token) return;

            var response = await fetch(`/api/ai-editor/conversations/${conversationId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                if (conversationId === this.currentConversationId) {
                    this.currentConversationId = null;
                    this.chatMessages.innerHTML = '';
                    this.addChatMessage('assistant', '–ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–∞–π—Ç–æ–≤. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Å–∞–π—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –µ–≥–æ –¥–ª—è –≤–∞—Å!');
                }

                this.loadConversations();
                this.updateStatus('–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω');
            }
        } catch (error) {
            console.error('Error deleting conversation:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞');
        }
    }

    checkUrlParams() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        var urlParams = new URLSearchParams(window.location.search);
        var projectId = urlParams.get('project');
        var returnToChat = urlParams.get('returnToChat');

        if (projectId) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
            this.loadConversation(parseInt(projectId));
            
            // –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –∫ —á–∞—Ç—É, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —á–∞—Ç–µ
            if (returnToChat === 'true') {
                this.focusOnChat();
            }
            
            // –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            window.history.replaceState({}, document.title, window.location.pathname);
        }
    }

    focusOnChat() {
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —á–∞—Ç–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ–µ–∫—Ç—É
        setTimeout(() => {
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤ —á–∞—Ç–µ
            if (this.chatMessages) {
                this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
            }
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            if (this.chatInput) {
                this.chatInput.focus();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showSuccess('–ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —á–∞—Ç–µ.');
        }, 1000);
    }

    openUserProfile() {
        // Navigate to the user's profile/dashboard page
        window.location.href = '/profile';
    }

    showProfileModal() {
        if (this.profileModal) {
            // Populate profile data
            var usernameSpan = document.getElementById('profile-username');
            var emailSpan = document.getElementById('profile-email');
            if (this.user) {
                if (usernameSpan) usernameSpan.textContent = this.user.username;
                if (emailSpan) emailSpan.textContent = this.user.email;
            }
            this.profileModal.classList.remove('hidden');
        }
    }

    hideProfileModal() {
        if (this.profileModal) {
            this.profileModal.classList.add('hidden');
        }
    }
    
    showProjectLaunchInfo(content) {
        console.log('üöÄ Showing project launch info');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        var urlMatch = content.match(/\*\*URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\*\* (http:\/\/localhost:\d+)/);
        if (urlMatch) {
            var projectUrl = urlMatch[1];
            console.log('üîó Project URL found:', projectUrl);
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            var launchButton = document.createElement('button');
            launchButton.className = 'project-launch-btn';
            launchButton.innerHTML = 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç';
            launchButton.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #22c55e;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-weight: 600;
                cursor: pointer;
                box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
                z-index: 1000;
                transition: all 0.3s ease;
            `;
            
            launchButton.addEventListener('click', () => {
                window.open(projectUrl, '_blank');
            });
            
            launchButton.addEventListener('mouseenter', () => {
                launchButton.style.transform = 'translateY(-2px)';
                launchButton.style.boxShadow = '0 6px 16px rgba(34, 197, 94, 0.4)';
            });
            
            launchButton.addEventListener('mouseleave', () => {
                launchButton.style.transform = 'translateY(0)';
                launchButton.style.boxShadow = '0 4px 12px rgba(34, 197, 94, 0.3)';
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            document.body.appendChild(launchButton);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (launchButton.parentNode) {
                    launchButton.parentNode.removeChild(launchButton);
                }
            }, 30000);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.aiEditor = new AIEditor();
});
