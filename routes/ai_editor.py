import os
import json
import re
from fastapi import APIRouter, Depends, HTTPException, status
from pydantic import BaseModel
from typing import List, Dict, Optional
from datetime import datetime
from sqlalchemy.orm import Session

from routes.auth import get_current_user, User
from utils.openai_client import openai_client
from utils.web_search import search_web, format_search_results
from database import get_db, Conversation as DBConversation, Message as DBMessage

router = APIRouter()

class AIEditorRequest(BaseModel):
    messages: List[Dict[str, str]]
    model: str = "gpt-4o-mini"
    conversation_id: Optional[int] = None

class AIEditorResponse(BaseModel):
    content: str
    conversation_id: int
    status: str
    timestamp: str

class ElementEditRequest(BaseModel):
    element_type: str
    current_text: str
    edit_instruction: str
    html_content: str

def should_search_web(message: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    search_keywords = [
        '–Ω–∞–π–¥–∏', '–ø–æ–∏—Å–∫', '–∞–∫—Ç—É–∞–ª—å–Ω', '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–µ–π—á–∞—Å', '—Å–µ–≥–æ–¥–Ω—è', 
        '–ø–æ—Å–ª–µ–¥–Ω–∏–µ', '—Ç—Ä–µ–Ω–¥', '–∫—É—Ä—Å', '–ø–æ–≥–æ–¥–∞', '—Ü–µ–Ω—ã', '—Å–æ–±—ã—Ç–∏—è',
        '—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç', '–∫–∞–∫ –¥–µ–ª–∞', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–¥–∞–Ω–Ω—ã–µ',
        '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ'
    ]
    
    message_lower = message.lower()
    return any(keyword in message_lower for keyword in search_keywords)

def extract_search_query(message: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É—Ç—å
    query = message
    
    # –£–±–∏—Ä–∞–µ–º —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ", "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ" –∏ —Ç.–¥.
    patterns_to_remove = [
        r'–Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ\s*',
        r'—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ\s*',
        r'—á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –æ\s*',
        r'–Ω–∞–π–¥–∏\s*',
        r'–ø–æ–∏—Å–∫\s*',
        r'–∞–∫—Ç—É–∞–ª—å–Ω.*–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ\s*',
        r'–Ω–æ–≤–æ—Å—Ç–∏ –æ\s*',
        r'—Å–æ–±—ã—Ç–∏—è.*–æ\s*'
    ]
    
    for pattern in patterns_to_remove:
        query = re.sub(pattern, '', query, flags=re.IGNORECASE)
    
    return query.strip()

@router.post("/api/ai-editor", response_model=AIEditorResponse)
async def ai_editor(request: AIEditorRequest, current_user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    """Editor endpoint for website generation with web search capability"""
    
    try:
        print(f"Editor request from user: {current_user.username}")
        print(f"Messages: {request.messages}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_message = request.messages[-1] if request.messages else None
        user_message = last_message.get('content', '') if last_message else ''
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º
        if not request.conversation_id:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è AI —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            conversation = DBConversation(
                title="–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–∞–π—Ç–∞",
                conversation_type="ai_editor",
                user_id=current_user.id
            )
            db.add(conversation)
            db.commit()
            db.refresh(conversation)
            conversation_id = conversation.id
        else:
            conversation_id = request.conversation_id
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–≥–æ–≤–æ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            conversation = db.query(DBConversation).filter(
                DBConversation.id == conversation_id,
                DBConversation.user_id == current_user.id,
                DBConversation.conversation_type == "ai_editor"
            ).first()
            if not conversation:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="Conversation not found"
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if last_message and last_message.get('role') == 'user':
            user_message_db = DBMessage(
                role="user",
                content=user_message,
                conversation_id=conversation_id
            )
            db.add(user_message_db)
            db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫
        web_search_results = ""
        if last_message and last_message.get('role') == 'user' and should_search_web(user_message):
            print(f"üîç –í–µ–±-–ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è: {user_message}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_query = extract_search_query(user_message)
            if not search_query:
                search_query = user_message
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            try:
                search_results = search_web(search_query, num_results=3)
                web_search_results = format_search_results(search_results)
                print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {len(search_results)}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")
                web_search_results = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if web_search_results:
            # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º
            system_message = {
                "role": "system",
                "content": f"""–¢—ã - WindexsAI, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. 

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–í–ê–ñ–ù–û:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–∞—è, —É–∫–∞–∂–∏ —ç—Ç–æ
‚Ä¢ –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
‚Ä¢ –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º —á–µ—Å—Ç–Ω–æ
‚Ä¢ –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:
{web_search_results}

–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
            }
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–æ–≤
            system_message = {
                "role": "system",
                "content": """–¢—ã senior UI/UX –¥–∏–∑–∞–π–Ω–µ—Ä –∏ frontend‚Äë—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –°–æ–∑–¥–∞–≤–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã (—É—Ä–æ–≤–Ω—è Apple/Stripe/Linear) —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤–∏–∑—É–∞–ª, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É –∏ –º–∏–∫—Ä–æ–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π HTML5, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (aria), mobile‚Äëfirst.
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π CSS: CSS variables, clamp(), Grid + Flex, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏/hover, glassmorphism/–≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ.
‚Ä¢ –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å—Ç–∏–ª–µ–π: –∫–æ—Ä–Ω–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤/—Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏, –º–æ–¥—É–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏, —Ä–∞–∑—É–º–Ω—ã–µ —Ç–µ–Ω–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (8px scale).
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –ª–µ–Ω–¥–∏–Ω–≥–∞: hero —Å —Å–∏–ª—å–Ω—ã–º –≤–∏–∑—É–∞–ª–æ–º –∏ CTA, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞/—Ñ–∏—á–∏ (cards), –æ—Ç–∑—ã–≤—ã, CTA‚Äë–±–ª–æ–∫, —Ñ—É—Ç–µ—Ä.
‚Ä¢ –õ–µ–≥–∫–∏–π JS –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ç–∞—Ä–∏—Ñ–æ–≤/—Ç–µ–º—ã).

–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –ø–æ –ø—Ä—è–º—ã–º —Å—Å—ã–ª–∫–∞–º (https://example.com/image.jpg)
‚Ä¢ –î–ª—è hero-—Å–µ–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Unsplash, Pexels, Pixabay
‚Ä¢ –î–æ–±–∞–≤–ª—è–π alt-—Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π CSS –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: width: 100%, height: auto, object-fit: cover
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
  - Unsplash: https://images.unsplash.com/photo-[id]?w=800&h=600&fit=crop
  - Pexels: https://images.pexels.com/photos/[id]/pexels-photo-[id].jpeg
  - Pixabay: https://cdn.pixabay.com/photo/[year]/[month]/[day]/[id]/[filename]

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ):
1) –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2) –ü–æ–ª–Ω—ã–π HTML –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏:

NEW_PAGE_START
<!DOCTYPE html>
<html lang=\"ru\">
<head>
  <meta charset=\"UTF-8\" />
  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />
  <title>–ù–∞–∑–≤–∞–Ω–∏–µ</title>
  <style>
    :root {
      --bg: #0b1220;
      --card: #0f172a;
      --text: #e5e7eb;
      --muted: #94a3b8;
      --accent: #22c55e;
      --accent-2: #16a34a;
      --shadow: 0 10px 30px rgba(34,197,94,.25);
    }
    html, body { margin:0; padding:0; background:var(--bg); color:var(--text); font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif; }
    .container { max-width: 1200px; margin: 0 auto; padding: clamp(16px, 3vw, 32px); }
    .hero { display:grid; gap:24px; align-items:center; grid-template-columns: 1.1fr 0.9fr; }
    .hero-card { background:linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02)); border:1px solid rgba(255,255,255,.06); border-radius:24px; padding: clamp(20px, 4vw, 36px); box-shadow: var(--shadow); backdrop-filter: blur(8px); }
    .title { font-size: clamp(32px, 6vw, 56px); line-height:1.05; letter-spacing:-0.02em; }
    .subtitle { color: var(--muted); font-size: clamp(16px, 2.4vw, 18px); }
    .cta { display:flex; gap:12px; margin-top: 16px; }
    .btn { background: linear-gradient(135deg, var(--accent), var(--accent-2)); color:white; border:none; padding: 12px 18px; border-radius: 12px; cursor:pointer; transition: .25s ease; box-shadow: var(--shadow); }
    .btn:hover { transform: translateY(-2px); filter: brightness(1.05); }
    .btn-outline { background: transparent; border:1px solid rgba(255,255,255,.12); color: var(--text); }
    .features { display:grid; grid-template-columns: repeat(3, 1fr); gap:16px; margin-top: 32px; }
    .card { background: var(--card); border:1px solid rgba(255,255,255,.06); border-radius: 16px; padding: 18px; transition: .25s ease; }
    .card:hover { transform: translateY(-3px); box-shadow: 0 12px 30px rgba(0,0,0,.25); }
    .muted { color: var(--muted); }
    .testimonials { display:grid; grid-template-columns: repeat(3, 1fr); gap:16px; margin-top: 32px; }
    .footer { margin-top: 48px; border-top:1px solid rgba(255,255,255,.06); padding-top: 24px; color: var(--muted); font-size: 14px; }
    @media (max-width: 900px) { .hero { grid-template-columns: 1fr; } .features, .testimonials { grid-template-columns: 1fr; } }
  </style>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const toggle = document.querySelector('[data-toggle]');
      if (toggle) toggle.addEventListener('click', () => alert('–î–µ–º–æ‚Äë–∫–ª–∏–∫!'));
    });
  </script>
  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />
  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />
  <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap\" rel=\"stylesheet\" />
  <meta name=\"description\" content=\"–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç —Å –æ—Ç–ª–∏—á–Ω—ã–º UX\" />
</head>
<body>
  <main class=\"container\">
    <section class=\"hero\">
      <div class=\"hero-card\">
        <h1 class=\"title\">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</h1>
        <p class=\"subtitle\">–ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, —Ñ–æ–∫—É—Å –Ω–∞ –≤—ã–≥–æ–¥–∞—Ö.</p>
        <div class=\"cta\">
          <button class=\"btn\" data-toggle>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ</button>
          <button class=\"btn btn-outline\">–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ</button>
        </div>
      </div>
      <div class=\"hero-card\">–í–∏–∑—É–∞–ª—å–Ω—ã–π –±–ª–æ–∫ / –º–∞–∫–µ—Ç / –≥—Ä–∞—Ñ–∏–∫–∞</div>
    </section>
    <section class=\"features\">
      <div class=\"card\"><h3>–§–∏—á–∞ 1</h3><p class=\"muted\">–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.</p></div>
      <div class=\"card\"><h3>–§–∏—á–∞ 2</h3><p class=\"muted\">–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.</p></div>
      <div class=\"card\"><h3>–§–∏—á–∞ 3</h3><p class=\"muted\">–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.</p></div>
    </section>
    <section class=\"testimonials\">
      <div class=\"card\">"–û—Ç–∑—ã–≤ 1"</div>
      <div class=\"card\">"–û—Ç–∑—ã–≤ 2"</div>
      <div class=\"card\">"–û—Ç–∑—ã–≤ 3"</div>
    </section>
    <footer class=\"footer\">¬© 2025 WindexsAI. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</footer>
  </main>
  
  <script>
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∏–∫—Ä–æ–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    document.querySelectorAll('.card').forEach(c => {
      c.addEventListener('mousemove', (e) => {
        c.style.transform = `translateY(-3px)`;
      });
      c.addEventListener('mouseleave', () => {
        c.style.transform = '';
      });
    });
  </script>
</body>
</html>
NEW_PAGE_END"""
            }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [system_message] + request.messages
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ WindexAI —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ–º –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏, —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–æ–ª–±—ç–∫–æ–º
        preferred_model = "gpt-4o"  # –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        fallback_model = "gpt-4o-mini"
        try:
            response = openai_client.chat.completions.create(
                model=preferred_model,
                messages=messages,
                max_tokens=3000
            )
        except Exception as _:
            response = openai_client.chat.completions.create(
                model=fallback_model,
            messages=messages,
                max_tokens=2500
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        content = response.choices[0].message.content
        print(f"Response received: {len(content) if content else 0} characters")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ai_message_db = DBMessage(
            role="assistant",
            content=content or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç.",
            conversation_id=conversation_id
        )
        db.add(ai_message_db)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if len(request.messages) == 1:  # –ü–µ—Ä–≤—ã–π –æ–±–º–µ–Ω
            title = user_message[:50] + "..." if len(user_message) > 50 else user_message
            conversation.title = title
        
        db.commit()
        
        return AIEditorResponse(
            content=content or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç.",
            conversation_id=conversation_id,
            status="completed",
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        print(f"Editor error: {str(e)}")
        return AIEditorResponse(
            content=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}",
            conversation_id=conversation_id if 'conversation_id' in locals() else 0,
            status="error",
            timestamp=datetime.now().isoformat()
        )

@router.post("/api/ai-editor/edit-element")
async def edit_element(
    request: ElementEditRequest,
    user: User = Depends(get_current_user)
):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ"""
    try:
        print(f"Element edit request from user: {user.username}")
        print(f"Element type: {request.element_type}")
        print(f"Current text: {request.current_text}")
        print(f"Edit instruction: {request.edit_instruction}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
        edit_prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å–≤–æ–µ–º —Å–∞–π—Ç–µ.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –≠–õ–ï–ú–ï–ù–¢–ï:
- –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: {request.element_type}
- –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: "{request.current_text}"
- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é: {request.edit_instruction}

–¢–ï–ö–£–©–ò–ô HTML –ö–û–î –°–ê–ô–¢–ê:
{request.html_content}

–ó–ê–î–ê–ß–ê:
–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–æ—Ö—Ä–∞–Ω–∏ –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π HTML –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ù–∞–π–¥–∏ —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º "{request.current_text}" –≤ HTML
2. –ü—Ä–∏–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ "{request.edit_instruction}"
3. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å—Ç–∏–ª–∏ —Å–∞–π—Ç–∞
4. –í–µ—Ä–Ω–∏ –ø–æ–ª–Ω—ã–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML –∫–æ–¥
5. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ

–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:
‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –•–æ—Ä–æ—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: Unsplash, Pexels, Pixabay
‚Ä¢ –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π alt-—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
RESPONSE_START
[–¢–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
RESPONSE_END

HTML_START
[–ü–æ–ª–Ω—ã–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML –∫–æ–¥]
HTML_END
"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ HTML/CSS."},
                {"role": "user", "content": edit_prompt}
            ],
            max_tokens=4000,
            temperature=0.3
        )
        
        response_text = response.choices[0].message.content
        print(f"Response received: {len(response_text)} characters")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º HTML –∫–æ–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        html_match = re.search(r'HTML_START\s*(.*?)\s*HTML_END', response_text, re.DOTALL)
        response_match = re.search(r'RESPONSE_START\s*(.*?)\s*RESPONSE_END', response_text, re.DOTALL)
        
        if html_match:
            updated_html = html_match.group(1).strip()
            response_text = response_match.group(1).strip() if response_match else "–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω."
            
            return {
                "html_content": updated_html,
                "response": response_text,
                "status": "success"
            }
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å HTML, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
            return {
                "html_content": request.html_content,
                "response": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.",
                "status": "error"
            }
        
    except Exception as e:
        print(f"Element edit error: {str(e)}")
        return {
            "html_content": request.html_content,
            "response": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}",
            "status": "error"
        }

@router.get("/api/ai-editor/conversations")
async def get_ai_editor_conversations(current_user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    """Get all AI editor conversations for current user"""
    conversations = db.query(DBConversation).filter(
        DBConversation.user_id == current_user.id,
        DBConversation.conversation_type == "ai_editor"
    ).order_by(DBConversation.updated_at.desc()).all()
    
    user_conversations = []
    for conv in conversations:
        # Count messages
        message_count = db.query(DBMessage).filter(DBMessage.conversation_id == conv.id).count()
        # Get last message for preview
        last_msg = db.query(DBMessage).filter(DBMessage.conversation_id == conv.id).order_by(DBMessage.timestamp.desc()).first()
        snippet = last_msg.content if last_msg else ''
        snippet_date = last_msg.timestamp.isoformat() if last_msg else conv.created_at.isoformat()
        user_conversations.append({
            "id": conv.id,
            "title": conv.title,
            "preview": snippet,
            "date": snippet_date,
            "message_count": message_count
        })
    
    return {"conversations": user_conversations}

@router.get("/api/ai-editor/conversations/{conversation_id}")
async def get_ai_editor_conversation(conversation_id: int, current_user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    """Get AI editor conversation history"""
    conversation = db.query(DBConversation).filter(
        DBConversation.id == conversation_id,
        DBConversation.user_id == current_user.id,
        DBConversation.conversation_type == "ai_editor"
    ).first()
    
    if not conversation:
        raise HTTPException(status_code=404, detail="Conversation not found")
    
    messages = db.query(DBMessage).filter(
        DBMessage.conversation_id == conversation_id
    ).order_by(DBMessage.timestamp).all()
    
    conversation_data = {
        "id": conversation.id,
        "title": conversation.title,
        "timestamp": conversation.created_at.isoformat(),
        "messages": [
            {
                "role": msg.role,
                "content": msg.content,
                "timestamp": msg.timestamp.isoformat()
            }
            for msg in messages
        ]
    }
    
    return {"conversation": conversation_data}

@router.post("/api/ai-editor/conversations")
async def create_ai_editor_conversation(current_user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    """Create a new AI editor conversation"""
    conversation = DBConversation(
        title="–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–∞–π—Ç–∞",
        conversation_type="ai_editor",
        user_id=current_user.id
    )
    db.add(conversation)
    db.commit()
    db.refresh(conversation)
    
    return {"conversation_id": conversation.id}

@router.delete("/api/ai-editor/conversations/{conversation_id}")
async def delete_ai_editor_conversation(conversation_id: int, current_user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    """Delete AI editor conversation"""
    conversation = db.query(DBConversation).filter(
        DBConversation.id == conversation_id,
        DBConversation.user_id == current_user.id,
        DBConversation.conversation_type == "ai_editor"
    ).first()
    
    if not conversation:
        raise HTTPException(status_code=404, detail="Conversation not found")
    
    # Delete all messages first
    db.query(DBMessage).filter(DBMessage.conversation_id == conversation_id).delete()
    
    # Delete conversation
    db.delete(conversation)
    db.commit()
    
    return {"message": "Conversation deleted"}

@router.get("/api/ai-editor/page")
async def get_editor_page():
    """Serve the Editor page"""
    from fastapi.responses import FileResponse
    return FileResponse("static/editor.html")

@router.get("/api/ai-editor/test")
async def test_ai_editor():
    """Test endpoint"""
    return {"status": "Editor working"}