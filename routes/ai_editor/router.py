"""
AI Editor Router
HTTP endpoints for AI code generation
"""

import time
from typing import Dict, List, Optional
import psutil
from fastapi import APIRouter, Depends, HTTPException, status
from datetime import datetime

from .models import (
    AIEditorRequest,
    AIEditorResponse,
    ElementEditRequest,
    LLMThought,
    CodePart,
    CombinedCodeResult,
    ConversationsListResponse,
    ConversationDetailResponse,
    EditElementResponse,
    StatusResponse,
    DownloadResponse,
    PreviewResponse,
)
from .services import (
    ArchitectService,
    DeveloperService,
    CodeCombiner,
    EditService,
    LLMThoughtsManager,
    send_llm_thought
)
from routes.auth import User, get_current_user
from database import Conversation as DBConversation, Message as DBMessage, get_db
from sqlalchemy.orm import Session
from utils.web_search import search_web, format_search_results
from .utils import should_search_web, extract_search_query

router = APIRouter()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º—ã—Å–ª–µ–π LLM
llm_thoughts_manager = LLMThoughtsManager()


@router.get("/api/ai-editor/thoughts/{conversation_id}")
async def get_llm_thoughts(
    conversation_id: str,
    current_user: User = Depends(get_current_user)
) -> Dict[str, List[LLMThought]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º—ã—Å–ª–∏ LLM –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–µ—Å–µ–¥—ã"""
    thoughts = llm_thoughts_manager.get_thoughts(conversation_id)
    return {"thoughts": thoughts}


@router.post("/api/ai-editor")
async def ai_editor_endpoint(
    request: AIEditorRequest,
    current_user: User = Depends(get_current_user)
) -> AIEditorResponse:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è AI —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–µ–±-—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not request.messages:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No messages provided"
            )

        last_message = request.messages[-1]["content"]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        architect = ArchitectService()
        developer = DeveloperService()
        combiner = CodeCombiner()

        print(f"üîç Received mode: {request.mode}")
        print(f"üîç Web search check: {should_search_web(last_message)} for message: '{last_message[:50]}...'")
        print(f"üîç Use two-stage: {request.use_two_stage}")
        print(f"üîç Conversation ID: {request.conversation_id}")
        print(f"üîç Messages count: {len(request.messages)}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º conversation_id –≤ –Ω–∞—á–∞–ª–µ
        conversation_id = request.conversation_id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫
        web_search_results = None
        needs_web_search = should_search_web(last_message)
        if needs_web_search:
            search_query = extract_search_query(last_message)
            search_results = await search_web(search_query)
            web_search_results = format_search_results(search_results)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if web_search_results:
            # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º
            system_message = {
                "role": "system",
                "content": f"""–¢—ã - WindexsAI, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–í–ê–ñ–ù–û:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–∞—è, —É–∫–∞–∂–∏ —ç—Ç–æ
‚Ä¢ –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
‚Ä¢ –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º —á–µ—Å—Ç–Ω–æ
‚Ä¢ –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:
{web_search_results}

–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.""",
            }

            # TODO: Implement web search response handling
            raise HTTPException(
                status_code=status.HTTP_501_NOT_IMPLEMENTED,
                detail="Web search mode not implemented in refactored version"
            )

        elif request.use_two_stage and not web_search_results:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é —Å–∏—Å—Ç–µ–º—É LLM —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
            print("üöÄ Using two-stage LLM system with sequential generation")
            print(f"üîç Debug: use_two_stage={request.use_two_stage}, web_search_results={bool(web_search_results)}")
            print(f"üöÄ Two-stage mode: {request.mode}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º—ã—Å–ª–∏ LLM –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã
            temp_conversation_id = str(conversation_id) if conversation_id else f"temp_{datetime.now().timestamp()}"
            print(f"üöÄ Temporary conversation ID: {temp_conversation_id}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –º—ã—Å–ª—å
            await send_llm_thought(temp_conversation_id, "üí≠", f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å: \"{last_message[:50]}...\"")

            # –≠—Ç–∞–ø 1: –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø–ª–∞–Ω–∏—Ä—É–µ—Ç
            await send_llm_thought(temp_conversation_id, "üèóÔ∏è", "–°–æ–∑–¥–∞—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
            plan = await architect.create_plan(last_message, request.mode)
            print(f"üèóÔ∏è Plan created: {len(plan.steps)} steps")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º—ã—Å–ª—å –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞
            await send_llm_thought(temp_conversation_id, "üìã", f"–°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –∏–∑ {len(plan.steps)} —ç—Ç–∞–ø–æ–≤")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º—ã—Å–ª—è–º–∏
            plan_steps_text = "\n".join([f"{i+1}. {step.name}" for i, step in enumerate(plan.steps)])
            plan_text = f"""üí≠ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{last_message[:50]}..."

üèóÔ∏è –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...

üìã **–ü–õ–ê–ù –†–ê–ó–†–ê–ë–û–¢–ö–ò:**
{plan_steps_text}

üîß **–ò–¢–û–ì–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:**
{plan.final_structure}

‚ö° –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞..."""

            # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –ø–ª–∞–Ω–∞
            print(f"üë®‚Äçüíª Generating code for each step based on plan (Lite mode)...")
            print(f"üë®‚Äçüíª Plan analysis: {plan.analysis}")
            print(f"üë®‚Äçüíª Final structure: {plan.final_structure}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
            code_parts: List[CodePart] = []
            for step in plan.steps:
                print(f"üë®‚Äçüíª Generating {step.code_type} code for step: {step.name}")
                code_part = await developer.generate_code(step, request.mode, plan.analysis)
                code_parts.append(code_part)
                print(f"‚úÖ Generated {step.code_type} code for: {step.name}")

            print(f"üîß Generated {len(code_parts)} code parts")

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –≤ –µ–¥–∏–Ω—ã–π HTML —Ñ–∞–π–ª
            print("üîß Combining all code parts into single HTML file...")
            combined_result = await combiner.combine_parts(code_parts, request.mode)
            print("üîß Successfully combined code parts")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π HTML –∫–∞–∫ –æ—Ç–≤–µ—Ç
            raw_response = combined_result.content
            print(f"üìÑ Combined HTML length: {len(raw_response)} characters")
            print(f"üìÑ Combined HTML preview: {raw_response[:200]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML_START –º–∞—Ä–∫–µ—Ä–∞
            if "HTML_START" in raw_response:
                print("‚úÖ HTML_START marker found in combined HTML")
            else:
                print("‚ö†Ô∏è HTML_START marker NOT found in combined HTML")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º—ã—Å–ª–∏ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_thoughts = """
‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –≤–µ–±-—Å–∞–π—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞...

ü§î –£—á–∏—Ç—ã–≤–∞—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∑–∞–π–Ω—É –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏...

üí° –°–æ–∑–¥–∞—é –µ–¥–∏–Ω—ã–π HTML —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ —Å–µ–∫—Ü–∏—è–º–∏..."""

            # –î–æ–±–∞–≤–ª—è–µ–º –º—ã—Å–ª–∏ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_thoughts = f"{generation_thoughts}"

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            # TODO: Get design style from plan

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –º—ã—Å–ª—è–º–∏
            completed_steps_text = "\n".join([f"‚úÖ {step.name}" for step in plan.steps])
            ai_response = f"""{plan_text}

{generation_thoughts}

‚úÖ **–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –≠–¢–ê–ü–´:**
{completed_steps_text}

üéâ **–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**

{raw_response}"""

            return AIEditorResponse(
                content=ai_response,
                conversation_id=conversation_id or 1,  # TODO: Generate proper conversation ID
                status="completed",
                timestamp=datetime.now().isoformat()
            )

        else:
            # –û–¥–Ω–æ—ç—Ç–∞–ø–Ω—ã–π —Ä–µ–∂–∏–º (–ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
            raise HTTPException(
                status_code=status.HTTP_501_NOT_IMPLEMENTED,
                detail="Single-stage mode not implemented in refactored version"
            )

    except Exception as e:
        print(f"‚ùå AI Editor error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"AI Editor error: {str(e)}"
        )


@router.get("/api/ai-editor/conversations")
async def get_conversations(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
) -> ConversationsListResponse:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conversations = (
            db.query(DBConversation)
            .filter(DBConversation.user_id == current_user.id)
            .order_by(DBConversation.created_at.desc())
            .all()
        )

        return ConversationsListResponse(
            conversations=[
                {
                    "id": conv.id,
                    "title": conv.title,
                    "date": conv.created_at.isoformat(),
                    "message_count": len(conv.messages),
                }
                for conv in conversations
            ]
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/api/ai-editor/conversations/{conversation_id}")
async def get_conversation(
    conversation_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db),
) -> ConversationDetailResponse:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä"""
    try:
        conversation = (
            db.query(DBConversation)
            .filter(
                DBConversation.id == conversation_id,
                DBConversation.user_id == current_user.id,
            )
            .first()
        )

        if not conversation:
            raise HTTPException(status_code=404, detail="Conversation not found")

        return ConversationDetailResponse(
            conversation={
                "id": conversation.id,
                "title": conversation.title,
                "created_at": conversation.created_at.isoformat(),
                "messages": [
                    {
                        "role": msg.role,
                        "content": msg.content,
                        "timestamp": msg.timestamp.isoformat(),
                    }
                    for msg in conversation.messages
                ],
            }
        )
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.delete("/api/ai-editor/conversations/{conversation_id}")
async def delete_conversation(
    conversation_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db),
):
    """–£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä"""
    try:
        conversation = (
            db.query(DBConversation)
            .filter(
                DBConversation.id == conversation_id,
                DBConversation.user_id == current_user.id,
            )
            .first()
        )

        if not conversation:
            raise HTTPException(status_code=404, detail="Conversation not found")

        db.delete(conversation)
        db.commit()

        return {"message": "Conversation deleted successfully"}

    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/ai-editor/edit-element")
async def edit_element(
    request: ElementEditRequest,
    current_user: User = Depends(get_current_user)
) -> EditElementResponse:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
    edit_service = EditService()
    return await edit_service.edit_element(request)


@router.get("/api/ai-editor/status")
async def get_status() -> StatusResponse:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ AI —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    uptime = time.time() - psutil.boot_time()

    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    total_conversations = 0
    total_messages = 0

    return StatusResponse(
        status="Editor working",
        uptime=uptime,
        total_conversations=total_conversations,
        total_messages=total_messages
    )


@router.get("/api/ai-editor/download/{conversation_id}")
async def download_project(
    conversation_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
) -> DownloadResponse:
    """–°–∫–∞—á–∞—Ç—å Next.js –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ ZIP —Ñ–∞–π–ª"""
    # TODO: Implement project download functionality
    raise HTTPException(
        status_code=status.HTTP_501_NOT_IMPLEMENTED,
        detail="Download functionality not implemented in refactored version"
    )


@router.get("/api/ai-editor/project/{conversation_id}/preview")
async def preview_project(
    conversation_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
) -> PreviewResponse:
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–∞"""
    # TODO: Implement project preview functionality
    raise HTTPException(
        status_code=status.HTTP_501_NOT_IMPLEMENTED,
        detail="Preview functionality not implemented in refactored version"
    )


@router.get("/api/ai-editor/project/{conversation_id}/preview-proxy/{path:path}")
async def preview_proxy(
    conversation_id: int,
    path: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    # TODO: Implement preview proxy functionality
    raise HTTPException(
        status_code=status.HTTP_501_NOT_IMPLEMENTED,
        detail="Preview proxy functionality not implemented in refactored version"
    )


@router.get("/api/ai-editor/project/{conversation_id}/preview-proxy")
async def preview_proxy_root(
    conversation_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    # TODO: Implement preview proxy root functionality
    raise HTTPException(
        status_code=status.HTTP_501_NOT_IMPLEMENTED,
        detail="Preview proxy root functionality not implemented in refactored version"
    )
