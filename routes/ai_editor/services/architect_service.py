import json
from typing import Dict
from ..models import ArchitectPlan, DesignStyle, PlanStep, get_design_style_variation
from ..prompts.architect_prompts import ArchitectPromptBuilder
from utils.openai_client import openai_client


class ArchitectService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤–µ–±-—Å–∞–π—Ç–æ–≤"""

    def __init__(self, prompt_builder: ArchitectPromptBuilder = None):
        self.prompt_builder = prompt_builder or ArchitectPromptBuilder()

    async def create_plan(self, user_request: str, mode: str) -> ArchitectPlan:
        """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        print(f"üèóÔ∏è Architect LLM: Planning architecture for mode '{mode}'")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        design_style = get_design_style_variation()
        print(f"üé® Selected design style: {design_style.name}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = self.prompt_builder.build_prompt(design_style, user_request, mode)

        try:
            # –í—ã–∑—ã–≤–∞–µ–º LLM
            response = await openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": user_request}
                ],
                temperature=0.9
            )

            content = response.choices[0].message.content
            print(f"üèóÔ∏è Architect response: {content[:200]}...")
            print(f"üèóÔ∏è Full architect response length: {len(content)} characters")

            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            plan_data = json.loads(content)
            plan = ArchitectPlan(**plan_data)

            print(f"üèóÔ∏è Successfully parsed architect plan with {len(plan.steps)} steps")
            for i, step in enumerate(plan.steps, 1):
                print(f"üèóÔ∏è Step {i}: {step.name} ({step.code_type})")

            return plan

        except json.JSONDecodeError as e:
            print(f"‚ùå Failed to parse architect response: {e}")
            return self._create_fallback_plan(user_request, mode)
        except Exception as e:
            print(f"‚ùå Architect LLM error: {e}")
            return self._create_fallback_plan(user_request, mode)

    def _create_fallback_plan(self, user_request: str, mode: str) -> ArchitectPlan:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ LLM"""
        fallback_steps = [
            PlanStep(
                id=1,
                name="–°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ–¥–µ—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π",
                description="–°–æ–∑–¥–∞—Ç—å —à–∞–ø–∫—É —Å–∞–π—Ç–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                code_type="html",
                priority="high",
                dependencies=[]
            ),
            PlanStep(
                id=2,
                name="–°–æ–∑–¥–∞–Ω–∏–µ hero-—Å–µ–∫—Ü–∏–∏",
                description="–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å–µ–∫—Ü–∏—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é",
                code_type="html",
                priority="high",
                dependencies=[1]
            ),
            PlanStep(
                id=3,
                name="–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                description="–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å–∞–π—Ç–∞",
                code_type="html",
                priority="high",
                dependencies=[2]
            ),
            PlanStep(
                id=4,
                name="–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É—Ç–µ—Ä–∞",
                description="–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–≤–∞–ª —Å–∞–π—Ç–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π",
                code_type="html",
                priority="medium",
                dependencies=[3]
            ),
            PlanStep(
                id=5,
                name="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π",
                description="–î–æ–±–∞–≤–∏—Ç—å CSS —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π",
                code_type="css",
                priority="high",
                dependencies=[4]
            ),
            PlanStep(
                id=6,
                name="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                description="–î–æ–±–∞–≤–∏—Ç—å JavaScript –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                code_type="javascript",
                priority="medium",
                dependencies=[5]
            )
        ]

        return ArchitectPlan(
            analysis=f"–°–æ–∑–¥–∞–Ω–∏–µ {mode} –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {user_request}",
            steps=fallback_steps,
            final_structure="–ï–¥–∏–Ω—ã–π HTML —Ñ–∞–π–ª —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ CSS –∏ JavaScript"
        )

